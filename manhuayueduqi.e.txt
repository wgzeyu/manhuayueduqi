.版本 2
.支持库 EThread
.支持库 edroptarget
.支持库 iext
.支持库 eImgConverter
.支持库 iext2
.支持库 commobj
.支持库 shell
.支持库 eAPI
.支持库 spec
.支持库 BmpOperate

.程序集 窗口程序集_启动窗口, , , txt版本顺序启动窗口→窗口1→提示信息→大浏览窗口→全局变量
.程序集变量 待排序数组, 文本型, , "0"
.程序集变量 创建次数, 整数型, , , 防止创建文件循环

.子程序 __启动窗口_创建完毕

当前版本 ＝ 124
_启动窗口.标题 ＝ “漫画阅读器v” ＋ 到文本 (当前版本 ÷ 10) ＋ “ @WGzeyu”
调试_软件启动时间 ＝ 到长整数 (时间_取现行时间戳 ())
启动程序 ()
启动线程 (&更新检测, , 更新线程)
返回 ()

.子程序 新读取设置
.局部变量 全配置, 文本型
.局部变量 显示器的高度a, 短整数型
.局部变量 显示器的宽度a, 短整数型
.局部变量 创建次数, 整数型
.局部变量 已次数, 整数型
.局部变量 多目录列表, 文本型, , "0"

全配置 ＝ 编码_Utf8到Ansi (加载文件 (取运行目录 () ＋ “\新设置.ini”))
系统_取屏幕分辨率 (, 显示器的宽度a, 显示器的高度a, )
.如果真 (全配置 ＝ “”)
    .如果 (文件是否存在 (取运行目录 () ＋ “\设置.ini”))
        全配置 ＝ 到文本 (加载文件 (取运行目录 () ＋ “\设置.ini”))
        全配置 ＝ 文本_替换 (全配置, , , , “>否</”, “>假</”, “>是</”, “>真</”, “<3>复制<4>”, “<3>假<4>”, “<3>移动<4>”, “<3>真<4>”)
        弹送提示 (“已转码读取设置文件,建议打开设置点保存,即可存为新版设置无需再转码”)
    .否则
        .如果真 (新保存设置 (显示器的宽度a, 显示器的高度a, 40, 1, 3, 16777215, “”, 0, 假, 2, 真, 假, 假, 真, 假, 假, “”, 真, 假, “”, “upconv_7_anime_style_art_rgb”, “gpu”, 1, 真, “”, “”, 10, 5, 600, 80, 5, 90) ＝ 假)
            弹送提示 (“设置文件读取或创建失败，请尝试将软件放在纯英文目录下以管理员权限运行”, 真)
            结束 ()
        .如果真结束
        创建次数 ＝ 创建次数 ＋ 1
        .如果真 (创建次数 ＞ 3)
            弹送提示 (“设置文件读取失败，请尝试将软件放在纯英文目录下以管理员权限运行”, 真)
            结束 ()
        .如果真结束
        新读取设置 ()
        弹送提示 (“初始化完成”)
        返回 ()
    .如果结束

.如果真结束
是否等待 ＝ 真
显示器宽度 ＝ 到整数 (取出设置 (全配置, “显示器宽度”))
显示器高度 ＝ 到整数 (取出设置 (全配置, “显示器高度”))
任务栏高度 ＝ 到整数 (取出设置 (全配置, “任务栏高度”))
显示器高度 ＝ 显示器高度 － 任务栏高度
显示器数量 ＝ 到整数 (取出设置 (全配置, “显示器数量”))
图片数量 ＝ 到整数 (取出设置 (全配置, “图片数量”))
背景颜色 ＝ 到整数 (取出设置 (全配置, “背景颜色”, “16777215”))
配置目录 ＝ 取出设置 (全配置, “配置文件目录”)
显示器左边 ＝ 到整数 (取出设置 (全配置, “显示器左边”, “0”))
自动打开 ＝ 到逻辑型 (取出设置 (全配置, “自动打开”))
设置缓存级别 ＝ 到整数 (取出设置 (全配置, “缓存级别”, “2”))
是否自动排序 ＝ 到逻辑型 (取出设置 (全配置, “自动排序”, “真”))
是否隐藏调试 ＝ 到逻辑型 (取出设置 (全配置, “隐藏调试”))
是否详细调试 ＝ 到逻辑型 (取出设置 (全配置, “详细调试”))
是否悬停放大 ＝ 到逻辑型 (取出设置 (全配置, “悬停放大”, “真”))
JPG大图 ＝ 到逻辑型 (取出设置 (全配置, “JPG大图”))
不创建配置 ＝ 到逻辑型 (取出设置 (全配置, “不创建配置”))
设置文件整理 ＝ 取出设置 (全配置, “文件整理”)
是否等待缓存 ＝ 到逻辑型 (取出设置 (全配置, “是否等待缓存”, “真”))
是否压缩图片 ＝ 到逻辑型 (取出设置 (全配置, “是否压缩图片”))
waifu2x路径 ＝ 取出设置 (全配置, “waifu2x路径”)
waifu2x模型 ＝ 取出设置 (全配置, “waifu2x模型”, “upconv_7_anime_style_art_rgb”)
waifu2x处理器 ＝ 取出设置 (全配置, “waifu2x处理器”, “gpu”)
waifu2x降噪 ＝ 到整数 (取出设置 (全配置, “waifu2x降噪”, “1”))
waifu2x无损不降噪 ＝ 到逻辑型 (取出设置 (全配置, “waifu2x无损不降噪”))
收藏的目录 ＝ 取出设置 (全配置, “收藏目录”)
多目录文本 ＝ 取出设置 (全配置, “多目录”)
多目录列表 ＝ 分割文本 (多目录文本, “|”, )
设置_黑色阈值 ＝ 到整数 (取出设置 (全配置, “黑色阈值”, “10”))
设置_比例阈值 ＝ 到整数 (取出设置 (全配置, “比例阈值”, “5”))
设置_裁切宽度 ＝ 到整数 (取出设置 (全配置, “裁剪宽度”, “600”))
设置_裁切高度 ＝ 到整数 (取出设置 (全配置, “裁剪高度”, “80”))
设置_竖线忽略 ＝ 到整数 (取出设置 (全配置, “竖线忽略”, “5”))
设置_裁剪保存 ＝ 到整数 (取出设置 (全配置, “裁剪保存”, “90”))
调试信息 (到文本 (设置_裁切宽度) ＋ “裁切”)
组合框2.清空 ()
.计次循环首 (取数组成员数 (多目录列表), 已次数)
    组合框2.加入项目 (多目录列表 [已次数], )
.计次循环尾 ()
组合框2.宽度 ＝ 352

.子程序 取出设置, 文本型
.参数 全设置, 文本型
.参数 取出项目, 文本型
.参数 空时操作, 文本型, 可空, 取出设置为空时返回什么

.如果 (文本_取出中间文本 (全设置, “<” ＋ 取出项目 ＋ “>”, “</” ＋ 取出项目 ＋ “>”) ≠ “”)
    返回 (文本_取出中间文本 (全设置, “<” ＋ 取出项目 ＋ “>”, “</” ＋ 取出项目 ＋ “>”))
.否则
    返回 (空时操作)
.如果结束


.子程序 启动程序
.局部变量 图片宽, 整数型
.局部变量 图片高, 整数型
.局部变量 图片框的, 图片框
.局部变量 已次数, 整数型
.局部变量 图片全, 字节集, , "99"
.局部变量 全配置, 文本型
.局部变量 显示器的高度a, 短整数型
.局部变量 显示器的宽度a, 短整数型

计时 ＝ 取启动时间 ()
新读取设置 ()
.如果真 (目录_是否存在 (取运行目录 () ＋ “\log\”) ＝ 假 且 是否详细调试 ＝ 真)
    创建目录 (取运行目录 () ＋ “\log\”)
.如果真结束
系统_取屏幕分辨率 (, 显示器的宽度a, 显示器的高度a, )
.如果真 (是否悬停放大)
    _启动窗口.顶边 ＝ 0
    .如果真 ((显示器宽度 － _启动窗口.宽度) ÷ 4 ＞ 0)
        _启动窗口.左边 ＝ (显示器宽度 － _启动窗口.宽度) ÷ 4
    .如果真结束

.如果真结束
_启动窗口.底色 ＝ 背景颜色
箭头.背景颜色 ＝ 背景颜色
.如果真 (状态_是否已加速搜索)
    进度条1.可视 ＝ 真
    进度条1.位置 ＝ 进度条1.最大位置
.如果真结束
.如果 (背景颜色 ＝ 16777215)
    箭头.图片 ＝ #黑正
.否则
    箭头.图片 ＝ #白正
.如果结束
.如果真 (是否悬停放大)
    悬停时钟.时钟周期 ＝ 100
.如果真结束
.如果 (配置目录 ＝ “”)
    配置目录 ＝ 取运行目录 () ＋ “\”
.否则
    .如果真 (取文本右边 (配置目录, 1) ≠ “\”)
        配置目录 ＝ 配置目录 ＋ “\”
    .如果真结束

.如果结束
创建设置目录 (配置目录)
调试信息 (配置目录)
按钮4.左边 ＝ 显示器宽度 × 2 － 按钮4.宽度
.如果真 (显示器数量 ＝ 1)
    按钮4.左边 ＝ 显示器宽度 － 按钮4.宽度
.如果真结束
.如果真 (显示器高度 ＞ 940 且 _启动窗口.高度 ＝ 680 且 设置是否更改 ＝ 真)
    销毁 ()
    载入 (_启动窗口, , 假)
    返回 ()
.如果真结束
设置是否更改 ＝ 假
调试信息 (到文本 (显示器高度) ＋ 到文本 (_启动窗口.高度))
.如果真 (显示器高度 ＜ 940)
    小屏调整 ()
.如果真结束
设定图片数量 ()
拖放对象1.注册拖放控件 (_启动窗口.取窗口句柄 ())
调试信息 (“耗时毫秒” ＋ 到文本 (取启动时间 () － 计时))
.如果真 (按钮8.标题 ≠ “历史列表”)
    _按钮8_被单击 ()
.如果真结束
.如果真 (自动打开 ＝ 真)
    _按钮8_被单击 ()
.如果真结束
图片框大浏览.左边 ＝ 0
图片框大浏览.宽度 ＝ 显示器宽度 × 显示器数量
图片框大浏览.高度 ＝ 显示器高度
启动线程 (&启动后, , )

.子程序 启动后

.如果真 (自动打开 ≠ 真)
    初始化列表 (, , 真)
.如果真结束


.子程序 设定图片数量
.局部变量 已次数, 整数型
.局部变量 图片框的, 图片框
.局部变量 标签的, 透明标签

.计次循环首 (30, 已次数)
    图片框的 ＝ 取标记组件 (已次数 ＋ 100)
    图片框的.可视 ＝ 真
    标签的 ＝ 取标记组件 (已次数 ＋ 300)
    标签的.可视 ＝ 真
    .如果真 (背景颜色 ＝ 16777215)
        标签的.文本颜色 ＝ #黑色
    .如果真结束

.计次循环尾 ()
.计次循环首 (30 － 图片数量, 已次数)
    图片框的 ＝ 取标记组件 (已次数 ＋ 图片数量 ＋ 100)
    图片框的.可视 ＝ 假
    标签的 ＝ 取标记组件 (已次数 ＋ 图片数量 ＋ 300)
    标签的.可视 ＝ 假
.计次循环尾 ()

.子程序 更新检测
.局部变量 访问结果, 文本型
.局部变量 循环次数, 整数型
.局部变量 读取版本, 整数型
.局部变量 更新内容, 文本型
.局部变量 已次数, 整数型
.局部变量 使用服务器, 文本型
.局部变量 新名称, 文本型

.计次循环首 (4, 循环次数)
    访问结果 ＝ 到文本 (编码_BASE64解码 (文本_取出中间文本 (到文本 (网页_访问_对象 (“https://wgzeyu.gtxcn.com/manhuayueduqi/updatecheck.php”, 1, “ver=” ＋ 到文本 (当前版本), , , , , , , , , 5 ＋ 循环次数 × 2)), “<base64>”, “</base64>”)))
    使用服务器 ＝ “HTTPS:wgzeyu.gtxcn.com[加密,日本VPS+CloudFlare,只取新版内容]”  ' 使用PHP防止被cloudflare缓存,第一时间读取到更新,并且只输出比当前版本新的版本号,加载更快
    .如果真 (访问结果 ≠ “”)  ' 1默认使用带HTTPS的个人服务器读取更新
        跳出循环 ()
    .如果真结束
    访问结果 ＝ 到文本 (编码_BASE64解码 (文本_取出中间文本 (到文本 (网页_访问_对象 (“https://wgzeyu.github.io/manhuayueduqi/updatecheck.txt”, 0, , , , , , , , , , 6 ＋ 循环次数 × 2)), “<base64>”, “</base64>”)))
    使用服务器 ＝ “HTTPS:wgzeyu.github.io[加密,GitHubIO]”
    .如果真 (访问结果 ≠ “”)  ' 2其次使用带HTTPS的GitHub读取更新
        跳出循环 ()
    .如果真结束
    .如果真 (循环次数 ＞ 2)
        访问结果 ＝ 到文本 (编码_BASE64解码 (文本_取出中间文本 (到文本 (网页_访问_对象 (“http://wgzeyu2.gtxcn.com/manhuayueduqi/updatecheck.txt”, 0, , , , , , , , , , 5 ＋ 循环次数 × 2)), “<base64>”, “</base64>”)))
        使用服务器 ＝ “HTTP:wgzeyu2.gtxcn.com[香港空间]”
        .如果真 (访问结果 ≠ “”)  ' 4上两个HTTPS每个访问失败三次后尝试访问香港空间，不支持HTTPS
            跳出循环 ()
        .如果真结束

    .如果真结束

.计次循环尾 ()
.如果真 (访问结果 ＝ “”)
    更新的内容 ＝ “读取失败”
    弹送提示 (“无法检测更新，请检查网络连接”)
    调试信息 (“检测更新失败”)
    返回 ()
.如果真结束
更新的内容 ＝ 访问结果
调试信息 (访问结果)
读取版本 ＝ 到整数 (文本_取出中间文本 (访问结果, “<ver>”, “</ver>”))
调试信息 (“本地版本号：” ＋ 到文本 (当前版本) ＋ “ 在线版本号：” ＋ 到文本 (读取版本) ＋ “ 使用服务器：” ＋ 使用服务器)
.如果真 (读取版本 ＞ 当前版本)
    新名称 ＝ 文本_取出中间文本 (访问结果, “<name>”, “</name>”)
    .如果真 (新名称 ＝ “漫画阅读器”)
        新名称 ＝ “”
    .如果真结束
    更新内容 ＝ “漫画阅读器v” ＋ 到文本 (当前版本 ÷ 10) ＋ “→” ＋ 新名称 ＋ “v” ＋ 到文本 (读取版本 ÷ 10) ＋ “更新记录：” ＋ #换行符
    .计次循环首 (读取版本 － 当前版本, 已次数)
        .如果真 (文本_取出中间文本 (访问结果, “<” ＋ 到文本 (读取版本 － 已次数 ＋ 1) ＋ “>”, “</” ＋ 到文本 (读取版本 － 已次数 ＋ 1) ＋ “>”) ≠ “”)
            更新内容 ＝ 更新内容 ＋ 文本_取出中间文本 (访问结果, “<” ＋ 到文本 (读取版本 － 已次数 ＋ 1) ＋ “>”, “</” ＋ 到文本 (读取版本 － 已次数 ＋ 1) ＋ “>”) ＋ #换行符
        .如果真结束

    .计次循环尾 ()
    .如果真 (信息框 (文本_取出中间文本 (访问结果, “<txt>”, “</txt>”) ＋ #换行符 ＋ #换行符 ＋ 更新内容 ＋ #换行符 ＋ “是否更新？”, 36, “发现新版本”, ) ＝ 5)
        网页_打开指定网址 (文本_取出中间文本 (访问结果, “<url>”, “</url>”))
    .如果真结束

.如果真结束


.子程序 小屏调整
.局部变量 按钮的, 按钮
.局部变量 图片的, 图片框
.局部变量 标签的, 标签
.局部变量 已次数, 整数型
.局部变量 高度的, 整数型

高度的 ＝ 86  ' 打开按钮
.计次循环首 (5, 已次数)
    按钮的 ＝ 取标记组件 (已次数 ＋ 40)
    按钮的.字体.字体大小 ＝ 18
    按钮的.宽度 ＝ 114
    按钮的.高度 ＝ 42
    按钮的.左边 ＝ 697
    按钮的.顶边 ＝ 高度的
    高度的 ＝ 高度的 ＋ 115
.计次循环尾 ()
高度的 ＝ 86  ' 删除按钮
.计次循环首 (5, 已次数)
    按钮的 ＝ 取标记组件 (已次数 ＋ 50)
    按钮的.宽度 ＝ 25
    按钮的.高度 ＝ 21
    按钮的.左边 ＝ 647
    按钮的.顶边 ＝ 高度的
    高度的 ＝ 高度的 ＋ 115
.计次循环尾 ()
高度的 ＝ 86  ' 收藏按钮
.计次循环首 (5, 已次数)
    按钮的 ＝ 取标记组件 (已次数 ＋ 500)
    按钮的.宽度 ＝ 25
    按钮的.高度 ＝ 21
    按钮的.左边 ＝ 672
    按钮的.顶边 ＝ 高度的
    高度的 ＝ 高度的 ＋ 115
.计次循环尾 ()
高度的 ＝ 106  ' 文件夹按钮
.计次循环首 (5, 已次数)
    按钮的 ＝ 取标记组件 (已次数 ＋ 60)
    按钮的.宽度 ＝ 50
    按钮的.高度 ＝ 22
    按钮的.左边 ＝ 647
    按钮的.标题 ＝ “文件夹”
    按钮的.顶边 ＝ 高度的
    高度的 ＝ 高度的 ＋ 115
.计次循环尾 ()
高度的 ＝ 16  ' 时间标签
.计次循环首 (5, 已次数)
    标签的 ＝ 取标记组件 (已次数 ＋ 10)
    标签的.左边 ＝ 647
    标签的.顶边 ＝ 高度的
    高度的 ＝ 高度的 ＋ 115
.计次循环尾 ()
高度的 ＝ 34  ' 位置标签
.计次循环首 (5, 已次数)
    标签的 ＝ 取标记组件 (已次数 ＋ 30)
    标签的.左边 ＝ 647
    标签的.顶边 ＝ 高度的
    高度的 ＝ 高度的 ＋ 115
.计次循环尾 ()
高度的 ＝ 16  ' 列表图片框
.计次循环首 (5, 已次数)
    图片的 ＝ 取标记组件 (已次数 ＋ 20)
    图片的.宽度 ＝ 635
    图片的.高度 ＝ 115
    图片的.左边 ＝ 8
    图片的.顶边 ＝ 高度的
    高度的 ＝ 高度的 ＋ 115
.计次循环尾 ()
标签1.字体.字体大小 ＝ 12  ' 数量标签
标签1.顶边 ＝ 594
标签1.宽度 ＝ 504
标签1.高度 ＝ 28
编辑框1.字体.字体大小 ＝ 14  ' 页数编辑框
编辑框1.宽度 ＝ 45
编辑框1.高度 ＝ 28
编辑框1.左边 ＝ 260
编辑框1.顶边 ＝ 594
列表跳转.字体.字体大小 ＝ 14  ' 页数跳转按钮
列表跳转.顶边 ＝ 594
列表跳转.左边 ＝ 308
列表跳转.宽度 ＝ 65
列表跳转.高度 ＝ 28
编辑框2.字体.字体大小 ＝ 12  ' 搜索编辑框
编辑框2.宽度 ＝ 160
编辑框2.高度 ＝ 28
编辑框2.左边 ＝ 377
编辑框2.顶边 ＝ 594
进度条1.顶边 ＝ 编辑框2.顶边 ＋ 编辑框2.高度 － 2  ' 搜索预加载进度条
进度条1.左边 ＝ 编辑框2.左边 ＋ 1
进度条1.宽度 ＝ 编辑框2.宽度 － 2
进度条1.高度 ＝ 1
列表搜索.字体.字体大小 ＝ 14  ' 搜索按钮
列表搜索.顶边 ＝ 594
列表搜索.左边 ＝ 540
列表搜索.宽度 ＝ 65
列表搜索.高度 ＝ 28
列表上页.字体.字体大小 ＝ 14  ' 上一页按钮
列表上页.顶边 ＝ 593
列表上页.左边 ＝ 608
列表上页.宽度 ＝ 100
列表上页.高度 ＝ 29
列表下页.字体.字体大小 ＝ 14  ' 下一页按钮
列表下页.顶边 ＝ 593
列表下页.左边 ＝ 711
列表下页.宽度 ＝ 100
列表下页.高度 ＝ 29
按钮7.左边 ＝ 640  ' 分割图片
按钮9.左边 ＝ 680
选择框1.左边 ＝ 720
分组框1.宽度 ＝ 817  ' 列表分组框
分组框1.高度 ＝ 628
_启动窗口.宽度 ＝ 821  ' 程序窗口
_启动窗口.高度 ＝ 680
_启动窗口.顶边 ＝ 到整数 ((显示器高度 － _启动窗口.高度) ÷ 2)
_启动窗口.左边 ＝ 到整数 ((显示器宽度 － _启动窗口.宽度) ÷ 2)
组合框1.宽度 ＝ 编辑框2.宽度  ' 增加组合框相关
组合框1.左边 ＝ 编辑框2.左边
组合框1.顶边 ＝ 编辑框2.顶边 ＋ 编辑框2.高度 － 组合框1.高度
组合框2.字体.字体大小 ＝ 9

.子程序 双屏调整
.局部变量 图片框的, 图片框
.局部变量 已次数, 整数型

.计次循环首 (20 － 图片数量, 已次数)
    图片框的 ＝ 取标记组件 (已次数 ＋ 图片数量 ＋ 100)
    图片框的.可视 ＝ 假
.计次循环尾 ()

.子程序 显示图片
.参数 是否强制, 逻辑型, 可空, 分次拖入不比等待全拖入完成再显示，强制执行显示图片
.参数 是否反向, 逻辑型, 可空, 不更新历史记录时间与重写ini
.参数 是否创建, 逻辑型, 可空
.局部变量 图片宽, 整数型
.局部变量 图片高, 整数型
.局部变量 图片框的, 图片框
.局部变量 已次数, 整数型
.局部变量 开始时, 长整数型
.局部变量 耗时, 长整数型
.局部变量 每屏图数, 整数型
.局部变量 标签的, 透明标签
.局部变量 全地址, 文本型, , "0"

每屏图数 ＝ 到整数 (图片数量 ÷ 显示器数量)
全地址 ＝ 分割文本 (全列表, #换行符, )
.如果真 (取字节集长度 (图片全 [图片数量]) ＞ 6)
    _启动窗口.顶边 ＝ 0
    .如果真 (是否等待)
        处理事件 ()
    .如果真结束
    _启动窗口.宽度 ＝ 显示器宽度 × 显示器数量
    .如果真 (是否等待)
        处理事件 ()
    .如果真结束
    _启动窗口.左边 ＝ 显示器左边
    透明标签1.高度 ＝ 显示器高度 － 24
    .如果真 (是否等待)
        处理事件 ()
    .如果真结束
    按钮1.左边 ＝ 0
    .如果真 (是否等待)
        处理事件 ()
    .如果真结束

.如果真结束
.计次循环首 (图片数量, 已次数)
    图片框的 ＝ 取标记组件 (已次数 ＋ 100)
    标签的 ＝ 取标记组件 (已次数 ＋ 300)
    调试信息 (“开始判断” ＋ 到文本 (是否强制) ＋ 到文本 (取字节集长度 (图片框的.图片)))
    ' 如果真 (是否强制 或 是否反向 或 取字节集长度 (图片框的.图片) ＜ 5)
    .如果真 (图片全 [已次数] ≠ 图片框的.图片 且 取字节集长度 (图片全 [已次数]) ＞ 10)
        调试信息 (“开始显示第” ＋ 到文本 (已次数) ＋ “张，共” ＋ 到文本 (图片数量) ＋ “张”)
        开始时 ＝ 取启动时间 ()
        图片宽 ＝ 图片_取宽度 (图片全 [已次数])
        图片高 ＝ 图片_取高度 (图片全 [已次数])
        标签的.左边 ＝ 到整数 (显示器宽度 ÷ 每屏图数 × (已次数 － 1))
        标签的.宽度 ＝ 到整数 (显示器宽度 ÷ 每屏图数)
        标签的.顶边 ＝ 四舍五入 ((显示器高度 － 四舍五入 (图片高 ÷ (图片宽 ÷ (显示器宽度 ÷ 每屏图数)), 0)) ÷ 2, 0) ＋ 四舍五入 (图片高 ÷ (图片宽 ÷ (显示器宽度 ÷ 每屏图数)), 0)
        图片框的.左边 ＝ 到整数 (显示器宽度 ÷ 每屏图数 × (已次数 － 1))
        图片框的.宽度 ＝ 到整数 (显示器宽度 ÷ 每屏图数)
        图片框的.高度 ＝ 四舍五入 (图片高 ÷ (图片宽 ÷ (显示器宽度 ÷ 每屏图数)), 0)
        图片框的.顶边 ＝ 四舍五入 ((显示器高度 － 四舍五入 (图片高 ÷ (图片宽 ÷ (显示器宽度 ÷ 每屏图数)), 0)) ÷ 2, 0)
        ' 标签的.左边 ＝ 到整数 (显示器宽度 ÷ 每屏图数 × (已次数 － 1))
        ' 标签的.宽度 ＝ 到整数 (显示器宽度 ÷ 每屏图数)
        ' 标签的.顶边 ＝ 图片框的.顶边 ＋ 图片框的.高度
        ' 改为先处理标签，不然反向时会闪两次
        调试信息 (标签的.标题 ＋ “标签标题” ＋ 到文本 (标签的.顶边) ＋ “标签顶边” ＋ 到文本 (标签的.左边) ＋ “标签左边” ＋ 到文本 (标签的.宽度) ＋ “标签宽度” ＋ 到文本 (标签的.可视) ＋ “标签可视”)
        .如果真 (图片框的.高度 － 显示器高度 ＞ 70)
            图片框的.高度 ＝ 显示器高度
            图片框的.顶边 ＝ 0
            图片框的.宽度 ＝ 四舍五入 (图片宽 ÷ (图片高 ÷ 显示器高度), 0)
        .如果真结束
        图片框的.背景颜色 ＝ 背景颜色
        调试信息 (“图片” ＋ 到文本 (已次数) ＋ “实宽” ＋ 到文本 (图片宽) ＋ “实高” ＋ 到文本 (图片高) ＋ “显宽” ＋ 到文本 (图片框的.宽度) ＋ “显高” ＋ 到文本 (图片框的.高度) ＋ “左边” ＋ 到文本 (图片框的.左边) ＋ “顶边” ＋ 到文本 (图片框的.顶边))
        图片框的.图片 ＝ 图片全 [已次数]
        调试信息 (到文本 (已次数) ＋ “已显示” ＋ 到文本 (取字节集长度 (图片框的.图片)) ＋ 到文本 (取字节集长度 (图片全 [已次数])))
        .如果真 (是否等待)
            处理事件 ()
        .如果真结束
        耗时 ＝ 耗时 ＋ 取启动时间 () － 开始时

    .如果真结束
    图片框的.调整层次 (1)
    标签的.调整层次 (1)
    大浏览调整层次 (真)
.计次循环尾 ()
' 如果真 (取字节集长度 (图片框的.图片) ＞ 6 且 反向开关 ＝ 假)
.如果真 (取字节集长度 (图片全 [图片数量]) ＞ 6)
    .如果真 (是否创建)
        .如果真 (创建新记录 () ＝ 假)
            弹送提示 (“历史记录创建失败”)
        .如果真结束

    .如果真结束
    .如果真 (是否等待)
        处理事件 ()
    .如果真结束
    ' 时钟1.时钟周期 ＝ 四舍五入 (耗时 ÷ 图片数量 × 1.5, 0)
    时钟1.时钟周期 ＝ 1
.如果真结束
历史列表打开 ＝ 假
' 反向开关 ＝ 假
_启动窗口.顶边 ＝ 0
按钮2.可视 ＝ 假
' 输出当前全部分辨率 ()

.子程序 创建新记录, 逻辑型

当前时间 ＝ 时间_取现行时间戳 (真)
.如果真 (不创建配置 ＝ 假)
    写到文件 (文件_取目录 (文本_取出中间文本 (“<1>” ＋ 全列表, “<1>”, #换行符)) ＋ 当前时间 ＋ “.ini”, 到字节集 (全列表))
.如果真结束
返回 (写到文件 (配置目录 ＋ “ini\” ＋ 当前时间 ＋ “.ini”, 到字节集 (全列表)))

.子程序 输出当前全部分辨率
.局部变量 图片框的, 图片框
.局部变量 图片宽, 整数型
.局部变量 图片高, 整数型
.局部变量 已次数, 整数型

.如果真 (是否隐藏调试 ＝ 假)
    .计次循环首 (图片数量, 已次数)
        图片框的 ＝ 取标记组件 (已次数 ＋ 100)
        图片宽 ＝ 图片_取宽度 (图片框的.图片)
        图片高 ＝ 图片_取高度 (图片框的.图片)
        调试信息 (“图片” ＋ 到文本 (已次数) ＋ “实宽” ＋ 到文本 (图片宽) ＋ “实高” ＋ 到文本 (图片高) ＋ “显宽” ＋ 到文本 (图片框的.宽度) ＋ “显高” ＋ 到文本 (图片框的.高度) ＋ “左边” ＋ 到文本 (图片框的.左边) ＋ “顶边” ＋ 到文本 (图片框的.顶边))
    .计次循环尾 ()
.如果真结束


.子程序 _拖放对象1_得到文件
.参数 接收到的文件路径, 文本型

上次接收 ＝ 接收到的文件路径
接收后 (接收到的文件路径)
' 启动线程 (&接收后, , )

.子程序 接收后
.参数 接收内容, 文本型
.局部变量 已次数, 整数型
.局部变量 全地址, 文本型, , "0"
.局部变量 要加次数, 整数型
.局部变量 地址次数, 整数型
.局部变量 全部地址, 文本型, , "0"
.局部变量 目标地址, 文本型
.局部变量 取出时间, 整数型
.局部变量 内已次数, 整数型
.局部变量 是否等长, 逻辑型
.局部变量 是否纯数字, 逻辑型
.局部变量 是否同目录, 逻辑型
.局部变量 临时数组, 文本型, , "0"
.局部变量 保存目录, 文本型
.局部变量 标签的, 透明标签
.局部变量 目标目录, 文本型
.局部变量 图片宽度, 整数型
.局部变量 压缩结果, 整数型
.局部变量 图片尺寸, 小数型
.局部变量 计时a, 长整数型
.局部变量 读入的图片, 字节集
.局部变量 图片的宽度, 整数型

全地址 ＝ 分割文本 (上次接收, #换行符, )
.如果真 (取数组成员数 (全地址) ＞ 图片数量)
    弹送提示 (“错误：拖入图片超过设定图片数量”)
    返回 ()
.如果真结束
取出时间 ＝ 到整数 (文本_取出中间文本 (“<1>” ＋ 文件_取文件名 (全地址 [1], 真), “<1>”, “.ini”))
调试信息 (到文本 (取出时间))
是否保存大图 ＝ 真
.如果真 (取出时间 ＞ 1490976000 且 取出时间 ＜ 到整数 (时间_取现行时间戳 (真)))
    全列表 ＝ 到文本 (加载文件 (全地址 [1], 1))
    全部地址 ＝ 分割文本 (全列表, #换行符, )
    .计次循环首 (图片数量, 已次数)
        图片全 [已次数] ＝ 加载文件 (全部地址 [已次数], 3)
        标签的 ＝ 取标记组件 (已次数 ＋ 300)
        标签的.标题 ＝ 文件_取文件名 (全部地址 [已次数], 真)
    .计次循环尾 ()
    显示图片 ()
    .如果真 (创建新记录 () ＝ 假)
        弹送提示 (“历史记录创建失败”)
    .如果真结束
    删除文件 (配置目录 ＋ “img_s\” ＋ 目标地址 ＋ “.jpg”)
    删除文件 (配置目录 ＋ “img_b\” ＋ 目标地址 ＋ “.png”)
    删除文件 (配置目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”)
    删除文件 (配置目录 ＋ “set\” ＋ 目标地址 ＋ “.ini”)
    删除文件 (全地址 [1])
    初始化显示 ()
    返回 ()
.如果真结束
调试信息 (到文本 (取数组成员数 (全地址)) ＋ “拖入接收数量”)
.计次循环首 (取数组成员数 (全地址), 已次数)
    ' 如果真 (文本_替换 (编码_Unicode到Ansi (编码_Ansi到Unicode (全地址 [已次数])), , , , “?”, “ ”) ≠ 全地址 [已次数])
    ' 如果真 (文本_替换 (全地址 [已次数], , , , “?”, “ ”) ≠ 全地址 [已次数])
    .如果真 (快速取出现次数 (全地址 [已次数], “?”) ≠ 0)  ' 判断有Unicode字符
        弹送提示 (“目录中含有Unicode字符导致无法读取，请重命名后再拖入”)
        返回 ()
    .如果真结束
    调试信息 (文本_替换 (编码_Unicode到Ansi (编码_Ansi到Unicode (全地址 [已次数])), , , , “?”, “ ”) ＋ 全地址 [已次数])
.计次循环尾 ()
.如果真 (是否自动排序 且 取数组成员数 (全地址) ＞ 1)
    ' 先执行所有判断，实际是为了省事，反正才只有几行不影响效率，还能给以后留下优化空间
    是否同目录 ＝ 真  ' 不全都是同一目录不排序
    .计次循环首 (取数组成员数 (全地址), 已次数)
        .如果真 (文件_取目录 (全地址 [已次数]) ≠ 文件_取目录 (全地址 [1]))
            是否同目录 ＝ 假
        .如果真结束

    .计次循环尾 ()
    是否等长 ＝ 真  ' 判断是否等长，若等长则表示为01/03/20这样排序，直接使用文本排序，支持数字前含有其他字符
    .计次循环首 (取数组成员数 (全地址), 已次数)
        .如果真 (取文本长度 (文件_取文件名 (全地址 [已次数])) ≠ 取文本长度 (文件_取文件名 (全地址 [1])))
            是否等长 ＝ 假
        .如果真结束

    .计次循环尾 ()
    是否纯数字 ＝ 真  ' 若不等长，使用文本排序会变成1/20/3，所以在此判断如果不等长并且前面没有除数字外其他字符，就使用数字排序
    .计次循环首 (取数组成员数 (全地址), 已次数)
        .如果真 (取文本左边 (文件_取文件名 (全地址 [已次数]), 1) ≠ “0” 且 到整数 (取文本左边 (文件_取文件名 (全地址 [已次数]), 1)) ＝ 0)
            是否纯数字 ＝ 假
        .如果真结束

    .计次循环尾 ()
    .如果真 (是否同目录)
        重定义数组 (待排序数组, 假, 取数组成员数 (全地址))
        .计次循环首 (取数组成员数 (全地址), 已次数)
            待排序数组 [已次数] ＝ 文件_取文件名 (全地址 [已次数], 真)
            调试信息 (“排序前” ＋ 文件_取文件名 (全地址 [已次数]))
        .计次循环尾 ()
        调试信息 (“同目录，已排序预处理完成”)
        .判断开始 (是否等长)
            希尔排序 (取数组成员数 (全地址), 到整数 (&处理函数_希尔_常规文本), 0, 假)
            调试信息 (“等长，文本排序完成”)
        .判断 (是否纯数字)
            希尔排序 (取数组成员数 (全地址), 到整数 (&处理函数_希尔_数字文本), 0, 假)
            调试信息 (“不等长但纯数字，数字排序完成”)
        .默认
            弹送提示 (“文件名不等长且非纯数字,无法排序,请点到第1张上拖入”)
            调试信息 (“不等长也非纯数字，无法排序”)
        .判断结束
        保存目录 ＝ 文件_取目录 (全地址 [1])
        .计次循环首 (取数组成员数 (全地址), 已次数)
            全地址 [已次数] ＝ 保存目录 ＋ 待排序数组 [已次数]
            调试信息 (“排序后” ＋ 待排序数组 [已次数])
        .计次循环尾 ()
        调试信息 (“排序后处理完成”)
    .如果真结束

.如果真结束
计时a ＝ 到长整数 (时间_取现行时间戳 ())
.计次循环首 (取数组成员数 (全地址), 已次数)
    ' 调试信息 (全地址 [已次数])
    .如果真 (取字节集长度 (图片全 [图片数量]) ＞ 5)
        .计次循环首 (图片数量, 内已次数)
            图片全 [内已次数] ＝ 到字节集 (“”)
            调试信息 (到文本 (内已次数) ＋ “清空”)
        .计次循环尾 ()
        全列表 ＝ “”
    .如果真结束
    要加次数 ＝ 已次数
    .如果真 (取字节集长度 (图片全 [要加次数]) ＞ 5)
        .循环判断首 ()
            要加次数 ＝ 要加次数 ＋ 1
            .如果真 (取字节集长度 (图片全 [要加次数]) ＜ 5)
                跳出循环 ()
            .如果真结束

        .循环判断尾 (真)
    .如果真结束
    ' 调试信息 (到文本 (要加次数) ＋ “要加次数”)
    _启动窗口.标题 ＝ “漫画阅读器v” ＋ 到文本 (当前版本 ÷ 10) ＋ “ @WGzeyu ” ＋ 到文本 (要加次数) ＋ “/” ＋ 到文本 (图片数量) ＋ “剩” ＋ 到文本 (图片数量 － 要加次数) ＋ “ 加载中”
    ' 处理事件 ()
    地址次数 ＝ 已次数
    .如果真 (要加次数 ＞ 图片数量)
        要加次数 ＝ 图片数量
    .如果真结束
    .如果真 (地址次数 ＞ 图片数量)  ' 222222
        地址次数 ＝ 图片数量
    .如果真结束
    调试信息 (到文本 (要加次数) ＋ 全地址 [地址次数] ＋ “拖动开始读入图片”)
    图片全 [要加次数] ＝ 加载文件 (全地址 [地址次数], 3)
    .如果真 (是否压缩图片)
        图片尺寸 ＝ 取字节集长度 (图片全 [要加次数]) ÷ 1024 ÷ 1024
        图片宽度 ＝ 图片_取宽度 (图片全 [要加次数])
        图片的宽度 ＝ 图片宽度
        .如果真 (到小写 (文件_取扩展名 (全地址 [地址次数])) ＝ “.png”)
            图片尺寸 ＝ 图片尺寸 － 1  ' PNG加载更快，比目标3M的jpg大2M(5M)后再压缩
            图片的宽度 ＝ 图片的宽度 － 500  ' PNG加载更快，比目标2200大500(2700)后在压缩
        .如果真结束
        调试信息 (到文本 (图片尺寸) ＋ “尺寸MB”)
        .如果真 (取文本左边 (文件_取文件名 (全地址 [地址次数], 假), 2) ≠ “small_”)
            .如果真 (图片尺寸 ＞ 4 或 图片宽度 ＞ 2200)  ' 尺寸太大的压缩后也慢
                _启动窗口.标题 ＝ “漫画阅读器v” ＋ 到文本 (当前版本 ÷ 10) ＋ “ @WGzeyu ” ＋ 到文本 (要加次数) ＋ “/” ＋ 到文本 (图片数量) ＋ “剩” ＋ 到文本 (图片数量 － 要加次数) ＋ “ 压缩中，请稍候”
                调试信息 (“大于指定尺寸且没压缩过，开始压缩”)
                目标目录 ＝ 文件_取目录 (全地址 [地址次数])
                读入的图片 ＝ 加载文件 (全地址 [地址次数], 3)
                读入的图片 ＝ 图片_缩放 (读入的图片, 1280, 四舍五入 (1280 ÷ 图片宽度 × 图片_取高度 (读入的图片), 0))
                写到文件 (目标目录 ＋ “\small.bmp”, 读入的图片)
                压缩结果 ＝ 转换到JPG (目标目录 ＋ “\small.bmp”, 目标目录 ＋ “small_” ＋ 文件_取文件名 (全地址 [地址次数], 假) ＋ “_W1280.jpg”, 假, 80, 真, 0)
                .如果 (压缩结果 ＝ 1)
                    _启动窗口.标题 ＝ “漫画阅读器v” ＋ 到文本 (当前版本 ÷ 10) ＋ “ @WGzeyu ” ＋ 到文本 (要加次数) ＋ “/” ＋ 到文本 (图片数量) ＋ “剩” ＋ 到文本 (图片数量 － 要加次数) ＋ “ 加载中”
                    全地址 [地址次数] ＝ 目标目录 ＋ “small_” ＋ 文件_取文件名 (全地址 [地址次数], 假) ＋ “_W1280.jpg”
                    图片全 [要加次数] ＝ 加载文件 (全地址 [地址次数], 3)
                .否则
                    调试信息 (“压缩失败，原因：” ＋ 到文本 (压缩结果) ＋ “，对应结果：0: 未知错误； -1: 文件不存在； -2: 系统资源不足； -3: 该文件格式不被支持； -4: 编码时出错； -6: 编码时系统资源不足； -7: 编码参数错误。”)
                .如果结束
                删除文件 (目标目录 ＋ “\small.bmp”)
                处理事件 ()
            .如果真结束


        .如果真结束

    .如果真结束
    标签的 ＝ 取标记组件 (要加次数 ＋ 300)
    标签的.标题 ＝ 文件_取文件名 (全地址 [地址次数], 真)
    全列表 ＝ 全列表 ＋ 全地址 [地址次数] ＋ #换行符
    ' 调试信息 (到文本 (取字节集长度 (图片全 [已次数])) ＋ “长度”)
.计次循环尾 ()
调试信息 (“拖入图片全部读取完成”)
' 调试信息 (全列表)
' 如果真 (取字节集长度 (图片全 [图片数量]) ＞ 5)
显示图片 (, , 真)
调试信息 (“这次耗时ms” ＋ 到文本 (到长整数 (时间_取现行时间戳 ()) － 计时a))
_启动窗口.标题 ＝ “漫画阅读器v” ＋ 到文本 (当前版本 ÷ 10) ＋ “ @WGzeyu ” ＋ 到文本 (要加次数) ＋ “/” ＋ 到文本 (图片数量) ＋ “剩” ＋ 到文本 (图片数量 － 要加次数)
初始化显示 ()

.子程序 初始化显示

按钮5.标题 ＝ “反向”
反向状态 ＝ 假
等高状态 ＝ 假
裁剪状态 ＝ 假
按钮8.标题 ＝ “历史列表”
分组框1.可视 ＝ 假
.如果 (背景颜色 ＝ 16777215)
    箭头.图片 ＝ #黑正
.否则
    箭头.图片 ＝ #白正
.如果结束


.子程序 旧等高缩放, , , 等高等比缩放
.局部变量 图1高, 整数型
.局部变量 图2高, 整数型
.局部变量 图3高, 整数型
.局部变量 图1宽, 整数型
.局部变量 图2宽, 整数型
.局部变量 图3宽, 整数型
.局部变量 总高, 整数型
.局部变量 宽1, 整数型
.局部变量 宽2, 整数型
.局部变量 宽3, 整数型

信息框 (“废弃代码”, 0, , )
返回 ()

图1高 ＝ 图片_取高度 (图片全 [1])
图2高 ＝ 图片_取高度 (图片全 [2])
图3高 ＝ 图片_取高度 (图片全 [3])
图1宽 ＝ 图片_取宽度 (图片全 [1])
图2宽 ＝ 图片_取宽度 (图片全 [2])
图3宽 ＝ 图片_取宽度 (图片全 [3])
' 图2等宽 ＝ 四舍五入 (图2宽 ÷ (图2高 ÷ 图1高), 2)
' 图3等宽 ＝ 四舍五入 (图3宽 ÷ (图3高 ÷ 图1高), 2)
' 全等图1高比宽 ＝ 四舍五入 (显示器宽度 ÷ (图1宽 ＋ 图2等宽 ＋ 图3等宽), 2)
' 调试信息 (全等图1高比宽)
' 总高 ＝ 图1高 × 全等图1高比宽
' 宽1 ＝ 图1宽 × 全等图1高比宽
' 宽2 ＝ 图2等宽 × 全等图1高比宽
' 宽3 ＝ 图3等宽 × 全等图1高比宽
总高 ＝ 四舍五入 (图1高 × 显示器宽度 ÷ (图1宽 ＋ 图2宽 ÷ (图2高 ÷ 图1高) ＋ 图3宽 ÷ (图3高 ÷ 图1高)), 0)
宽1 ＝ 四舍五入 (图1宽 × 显示器宽度 ÷ (图1宽 ＋ 图2宽 ÷ (图2高 ÷ 图1高) ＋ 图3宽 ÷ (图3高 ÷ 图1高)), 0)
宽2 ＝ 四舍五入 (图2宽 ÷ (图2高 ÷ 图1高) × 显示器宽度 ÷ (图1宽 ＋ 图2宽 ÷ (图2高 ÷ 图1高) ＋ 图3宽 ÷ (图3高 ÷ 图1高)), 0)
宽3 ＝ 四舍五入 (图3宽 ÷ (图3高 ÷ 图1高) × 显示器宽度 ÷ (图1宽 ＋ 图2宽 ÷ (图2高 ÷ 图1高) ＋ 图3宽 ÷ (图3高 ÷ 图1高)), 0)
图片框1.高度 ＝ 总高
图片框2.高度 ＝ 总高
图片框3.高度 ＝ 总高
图片框1.宽度 ＝ 宽1
图片框2.宽度 ＝ 宽2
图片框3.宽度 ＝ 宽3
图片框2.左边 ＝ 宽1
图片框3.左边 ＝ 宽1 ＋ 宽2
图片框1.顶边 ＝ 四舍五入 ((显示器高度 － 总高) ÷ 2, 0)
图片框2.顶边 ＝ 四舍五入 ((显示器高度 － 总高) ÷ 2, 0)
图片框3.顶边 ＝ 四舍五入 ((显示器高度 － 总高) ÷ 2, 0)
调试信息 (宽1, 宽2, 宽3, 总高)
.如果真 (显示器数量 ≥ 2)
    ' _按钮2_被单击 ()
.如果真结束
.如果真 (显示器数量 ≥ 3)
    ' _按钮3_被单击 ()
.如果真结束
等高状态 ＝ 真
时钟1.时钟周期 ＝ 1

.子程序 等高缩放, , , 支持不同图片数量
.参数 显示器的数量, 整数型
.参数 显示器的高度, 整数型
.参数 显示器的宽度, 整数型
.参数 图片的数量, 整数型
.局部变量 图片高度, 整数型, , "10"
.局部变量 图片宽度, 整数型, , "10"
.局部变量 当前显示器, 整数型
.局部变量 已次数, 整数型
.局部变量 图片框的, 图片框
.局部变量 临时的, 整数型
.局部变量 每屏图数, 整数型
.局部变量 小已次数, 整数型
.局部变量 当前等比, 双精度小数型
.局部变量 标签的, 透明标签

每屏图数 ＝ 到整数 (图片的数量 ÷ 显示器的数量)
.计次循环首 (显示器的数量, 当前显示器)
    .计次循环首 (每屏图数, 已次数)
        图片高度 [已次数] ＝ 图片_取高度 (图片全 [已次数 ＋ (当前显示器 － 1) × 每屏图数])
        图片宽度 [已次数] ＝ 图片_取宽度 (图片全 [已次数 ＋ (当前显示器 － 1) × 每屏图数])
    .计次循环尾 ()
    .计次循环首 (每屏图数, 已次数)
        标签的 ＝ 取标记组件 (已次数 ＋ 300 ＋ (当前显示器 － 1) × 每屏图数)
        图片框的 ＝ 取标记组件 (已次数 ＋ 100 ＋ (当前显示器 － 1) × 每屏图数)
        当前等比 ＝ 0
        .计次循环首 (每屏图数, 小已次数)
            当前等比 ＝ 图片宽度 [小已次数] ÷ (图片高度 [小已次数] ÷ 图片高度 [1]) ＋ 当前等比
        .计次循环尾 ()
        图片框的.宽度 ＝ 四舍五入 (图片宽度 [已次数] ÷ (图片高度 [已次数] ÷ 图片高度 [1]) × 显示器的宽度 ÷ 当前等比, 0)
        图片框的.高度 ＝ 四舍五入 (图片高度 [1] × 显示器的宽度 ÷ 当前等比, 0)
        图片框的.顶边 ＝ 四舍五入 ((显示器的高度 － 图片框的.高度) ÷ 2, 0)
        .如果 (已次数 ＝ 1)
            临时的 ＝ 图片框的.左边 ＋ 图片框的.宽度
        .否则
            图片框的.左边 ＝ 临时的
            临时的 ＝ 临时的 ＋ 图片框的.宽度
        .如果结束
        标签的.左边 ＝ 图片框的.左边
        标签的.顶边 ＝ 图片框的.顶边 ＋ 图片框的.高度
        标签的.宽度 ＝ 图片框的.宽度
    .计次循环尾 ()
.计次循环尾 ()
waifu2x状态 ＝ 假
输出当前全部分辨率 ()

.子程序 _按钮5_被单击, , , 反向

反向处理 ()


.子程序 反向处理
.参数 是否不反向, 逻辑型, 可空
.局部变量 已次数, 整数型
.局部变量 图片框的, 图片框
.局部变量 全地址, 文本型, , "0"
.局部变量 标签的, 透明标签
.局部变量 之前状态, 逻辑型

全地址 ＝ 分割文本 (全列表, #换行符, )
是否保存大图 ＝ 真
.如果真 (是否不反向)
    之前状态 ＝ 反向状态
    .如果 (按钮5.标题 ＝ “反向”)
        按钮5.标题 ＝ “正向”
    .否则
        按钮5.标题 ＝ “反向”
    .如果结束

.如果真结束
.如果 (按钮5.标题 ＝ “反向”)
    按钮5.标题 ＝ “正向”
    .计次循环首 (图片数量, 已次数)
        图片全 [已次数] ＝ 加载文件 (全地址 [图片数量 ＋ 1 － 已次数], 3)
        标签的 ＝ 取标记组件 (已次数 ＋ 300)
        标签的.标题 ＝ 文件_取文件名 (全地址 [图片数量 ＋ 1 － 已次数], 真)
    .计次循环尾 ()
    反向状态 ＝ 真
    .如果 (背景颜色 ＝ 16777215)
        箭头.图片 ＝ #黑反
    .否则
        箭头.图片 ＝ #白反
    .如果结束

.否则
    按钮5.标题 ＝ “反向”
    .计次循环首 (图片数量, 已次数)
        图片全 [已次数] ＝ 加载文件 (全地址 [已次数], 3)
        标签的 ＝ 取标记组件 (已次数 ＋ 300)
        标签的.标题 ＝ 文件_取文件名 (全地址 [已次数], 真)
    .计次循环尾 ()
    反向状态 ＝ 假
    .如果 (背景颜色 ＝ 16777215)
        箭头.图片 ＝ #黑正
    .否则
        箭头.图片 ＝ #白正
    .如果结束

.如果结束
.如果 (是否不反向)
    反向状态 ＝ 之前状态
.否则
    等高状态 ＝ 假
    裁剪状态 ＝ 假
    waifu2x状态 ＝ 假
.如果结束
' 反向开关 ＝ 真
显示图片 (, 真)


.子程序 waifu2x缩放
.局部变量 图片框的, 图片框
.局部变量 标签的, 透明标签
.局部变量 全地址, 文本型, , "0"
.局部变量 当前文件名, 文本型
.局部变量 输出文件名, 文本型
.局部变量 已次数, 整数型
.局部变量 降噪等级, 整数型
.局部变量 当前模式, 整数型
.局部变量 失败次数, 整数型
.局部变量 缩小图片, 字节集
.局部变量 是否更小, 整数型
.局部变量 输出图片, 字节集

全地址 ＝ 分割文本 (全列表, #换行符, )
.如果真 (waifu2x模型 ＝ “upconv_7_anime_style_art_rgb”)
    当前模式 ＝ 0  ' 突然想起来不在设置界面调用不了组合框当前选择
.如果真结束
.如果真 (waifu2x模型 ＝ “upconv_7_photo”)
    当前模式 ＝ 1  ' 又不想改思路不想写这么长的模式在文件名里
.如果真结束
.如果真 (waifu2x模型 ＝ “anime_style_art_rgb”)
    当前模式 ＝ 2
.如果真结束
.如果真 (waifu2x模型 ＝ “photo”)
    当前模式 ＝ 3
.如果真结束
.如果真 (waifu2x模型 ＝ “anime_style_art”)
    当前模式 ＝ 4
.如果真结束
.如果真 (waifu2x模型 ＝ “ukbench”)
    当前模式 ＝ 5
.如果真结束
waifu2x处理结果 ＝ “”
.计次循环首 (图片数量, 已次数)
    .如果 (反向状态 ＝ 真)
        当前文件名 ＝ 全地址 [图片数量 ＋ 1 － 已次数]
    .否则
        当前文件名 ＝ 全地址 [已次数]
    .如果结束
    .如果真 (到小写 (取文本右边 (当前文件名, 3)) ≠ “gif”)
        图片框的 ＝ 取标记组件 (已次数 ＋ 100)
        标签的 ＝ 取标记组件 (已次数 ＋ 300)
        降噪等级 ＝ waifu2x降噪
        .如果真 (到小写 (取文本右边 (当前文件名, 3)) ＝ “png” 且 waifu2x无损不降噪 ＝ 真)
            降噪等级 ＝ 0
        .如果真结束
        输出文件名 ＝ 文件_取目录 (当前文件名)
        .如果 (图片_取宽度 (图片框的.图片) ＜ 图片框的.宽度)
            输出文件名 ＝ 输出文件名 ＋ “waifu2x_”
            输出文件名 ＝ 输出文件名 ＋ 文件_取文件名 (当前文件名, 假)
            输出文件名 ＝ 输出文件名 ＋ “_W” ＋ 到文本 (图片框的.宽度) ＋ “N” ＋ 到文本 (降噪等级) ＋ “M” ＋ 到文本 (当前模式)
        .否则
            输出文件名 ＝ 输出文件名 ＋ “small_”
            输出文件名 ＝ 输出文件名 ＋ 文件_取文件名 (当前文件名, 假)
            输出文件名 ＝ 输出文件名 ＋ “_W” ＋ 到文本 (图片框的.宽度)
            是否更小 ＝ 是否更小 ＋ 1
        .如果结束
        输出文件名 ＝ 输出文件名 ＋ “.png”
        .如果 (文件是否存在 (输出文件名) ＝ 真)
            图片框的.图片 ＝ 加载文件 (输出文件名, 3)
            标签的.标题 ＝ 文件_取文件名 (输出文件名, 真)
            waifu2x处理结果 ＝ waifu2x处理结果 ＋ 输出文件名 ＋ #换行符
        .否则
            .如果 (图片_取宽度 (图片框的.图片) ＜ 图片框的.宽度)
                .如果 (waifu2x (当前文件名, 输出文件名, waifu2x处理器, 降噪等级, 图片框的.宽度, 图片框的.高度, waifu2x模型, waifu2x路径, 真) ＝ 真)
                    图片框的.图片 ＝ 加载文件 (输出文件名, 3)
                    标签的.标题 ＝ 文件_取文件名 (输出文件名, 真)
                    waifu2x处理结果 ＝ waifu2x处理结果 ＋ 输出文件名 ＋ #换行符
                .否则
                    失败次数 ＝ 失败次数 ＋ 1
                    waifu2x处理结果 ＝ waifu2x处理结果 ＋ 当前文件名 ＋ #换行符
                .如果结束

            .否则
                转换到JPG (当前文件名, 文件_取目录 (当前文件名) ＋ “a.jpg”, 假, 90, 真, 80)  ' 用柔化来优化去网点摩尔纹效果
                输出图片 ＝ 加载文件 (文件_取目录 (当前文件名) ＋ “a.jpg”)
                删除文件 (文件_取目录 (当前文件名) ＋ “a.jpg”)
                输出图片 ＝ 图片_缩放 (输出图片, 图片框的.宽度, 图片框的.高度)
                .如果 (取字节集长度 (输出图片) ＞ 500)
                    图片_转换 (输出图片, 5, 输出文件名)
                    图片框的.图片 ＝ 输出图片
                    标签的.标题 ＝ 文件_取文件名 (输出文件名, 真)
                    标签的.标题 ＝ 文件_取文件名 (输出文件名, 真)
                    waifu2x处理结果 ＝ waifu2x处理结果 ＋ 输出文件名 ＋ #换行符
                .否则
                    失败次数 ＝ 失败次数 ＋ 1
                    waifu2x处理结果 ＝ waifu2x处理结果 ＋ 当前文件名 ＋ #换行符
                .如果结束

            .如果结束

        .如果结束

    .如果真结束
    处理事件 ()
.计次循环尾 ()
.如果真 (失败次数 ≠ 0 且 失败次数 ＝ 图片数量)
    弹送提示 (“全部图片处理失败”)
.如果真结束
.如果真 (失败次数 ≠ 0 且 失败次数 ＜ 图片数量)
    弹送提示 (到文本 (失败次数) ＋ “张图片处理失败”)
.如果真结束
.如果真 (失败次数 ＝ 0 且 是否更小 ＝ 图片数量)
    弹送提示 (“图片比显示分辨率高,不使用waifu2x,更换缩放算法显示”)
.如果真结束
.如果真 (失败次数 ＝ 0 且 是否更小 ≠ 0 且 是否更小 ＜ 图片数量)
    弹送提示 (“比显示分辨率高的图片将不使用waifu2x,更换缩放算法显示”)
.如果真结束
waifu2x状态 ＝ 真
.如果真 (失败次数 ＜ 图片数量)
    时钟1.时钟周期 ＝ 1
.如果真结束


.子程序 _按钮4_被单击

.如果真 (是否详细调试)
    文件_改名 (取运行目录 () ＋ “\log\A” ＋ 到文本 (调试_软件启动时间) ＋ “.log”, 取运行目录 () ＋ “\log\B” ＋ 到文本 (调试_软件启动时间) ＋ “.log”)
.如果真结束
结束 ()

.子程序 _时钟1_周期事件
.局部变量 小图, 字节集
.局部变量 大图, 字节集
.局部变量 写入内容, 文本型
.局部变量 透明标签状态, 逻辑型
.局部变量 标签的, 透明标签
.局部变量 已次数, 整数型

时钟1.时钟周期 ＝ 0
_启动窗口.边框 ＝ 0
调试信息 (“开始截图”)
强制结束线程 (更新线程)
.如果真 (按钮8.标题 ≠ “历史列表”)
    _按钮8_被单击 ()
.如果真结束
' 图片_转换 (快照 (_启动窗口.取窗口句柄 (), 显示器数量 × 300, 163), 5, , 小图)
按钮1.可视 ＝ 假
按钮4.可视 ＝ 假
按钮5.可视 ＝ 假
按钮7.可视 ＝ 假
按钮8.可视 ＝ 假
按钮9.可视 ＝ 假
按钮2.可视 ＝ 假
按钮3.可视 ＝ 假
按钮6.可视 ＝ 假
按钮10.可视 ＝ 假
按钮11.可视 ＝ 假
按钮12.可视 ＝ 假
图片框大浏览.可视 ＝ 假
透明标签状态 ＝ 透明标签1.可视
透明标签1.可视 ＝ 假
选择框1.可视 ＝ 假
_启动窗口.高度 ＝ 显示器高度
箭头.可视 ＝ 假
.计次循环首 (图片数量, 已次数)
    标签的 ＝ 取标记组件 (已次数 ＋ 300)
    标签的.可视 ＝ 假
.计次循环尾 ()
处理事件 ()
小图 ＝ 快照 (_启动窗口.取窗口句柄 (), 显示器数量 × 300, 163)
.计次循环首 (图片数量, 已次数)
    标签的 ＝ 取标记组件 (已次数 ＋ 300)
    标签的.可视 ＝ 真
    处理事件 ()
.计次循环尾 ()
.如果真 (是否保存大图)
    .如果 (JPG大图)
        大图 ＝ 快照 (_启动窗口.取窗口句柄 (), 四舍五入 (显示器宽度 × 显示器数量 ÷ 2, 0), 四舍五入 (显示器高度 ÷ 2, 0))
    .否则
        大图 ＝ 快照 (_启动窗口.取窗口句柄 (), 四舍五入 (显示器宽度 × 显示器数量 ÷ 1.4, 0), 四舍五入 (显示器高度 ÷ 1.4, 0))
    .如果结束

.如果真结束
按钮1.可视 ＝ 真
按钮4.可视 ＝ 真
按钮5.可视 ＝ 真
按钮10.可视 ＝ 真
按钮11.可视 ＝ 真
按钮12.可视 ＝ 真
箭头.可视 ＝ 真
.如果真 (是否隐藏调试 ＝ 假)
    按钮3.可视 ＝ 真
.如果真结束
透明标签1.可视 ＝ 透明标签状态
按钮8.可视 ＝ 真
按钮1.禁止 ＝ 假
按钮5.禁止 ＝ 假
.如果真 (waifu2x路径 ≠ “”)
    按钮10.禁止 ＝ 假
.如果真结束
按钮6.可视 ＝ 真
按钮12.禁止 ＝ 假
处理事件 ()
删除文件 (配置目录 ＋ “img_b\” ＋ 当前时间 ＋ “.png”)
图片_转换 (小图, 5, 配置目录 ＋ “img_b\” ＋ 当前时间 ＋ “.png”)
.如果真 (是否保存大图)
    删除文件 (配置目录 ＋ “img_s\” ＋ 当前时间 ＋ “.jpg”)
    写到文件 (配置目录 ＋ “img_s\” ＋ 当前时间 ＋ “.bmp”, 大图)
    .如果 (JPG大图)
        转换到JPG (配置目录 ＋ “img_s\” ＋ 当前时间 ＋ “.bmp”, 配置目录 ＋ “img_s\” ＋ 当前时间 ＋ “.jpg”, 假, 77, 真, 0)
    .否则
        转换到JPG (配置目录 ＋ “img_s\” ＋ 当前时间 ＋ “.bmp”, 配置目录 ＋ “img_s\” ＋ 当前时间 ＋ “.jpg”, 假, 10, 真, 70)
    .如果结束
    删除文件 (配置目录 ＋ “img_s\” ＋ 当前时间 ＋ “.bmp”)
    是否保存大图 ＝ 假
.如果真结束
删除文件 (配置目录 ＋ “set\” ＋ 当前时间 ＋ “.ini”)
历史列表打开 ＝ 假
.如果真 (反向状态 ＝ 真)
    写入内容 ＝ 写入内容 ＋ “反向” ＋ #换行符
.如果真结束
.如果真 (等高状态 ＝ 真)
    写入内容 ＝ 写入内容 ＋ “等高” ＋ #换行符
.如果真结束
.如果真 (waifu2x状态 ＝ 真)
    写入内容 ＝ 写入内容 ＋ “waifu2x” ＋ #换行符
.如果真结束
.如果真 (裁剪状态 ＝ 真)
    写入内容 ＝ 写入内容 ＋ “裁剪” ＋ #换行符
.如果真结束
.如果真 (写入内容 ≠ “”)
    写到文件 (配置目录 ＋ “set\” ＋ 当前时间 ＋ “.ini”, 到字节集 (写入内容))
.如果真结束
调试信息 (写入内容 ＋ 到文本 (当前时间))
调试信息 (到文本 (取启动时间 () － 计时) ＋ “加载总耗时”)


.子程序 _超级列表框1_左键单击表项
.局部变量 已次数, 整数型
.局部变量 全部地址, 文本型, , "0"
.局部变量 目标地址, 文本型

超级列表框1.可视 ＝ 假
是否停止加载 ＝ 真
目标地址 ＝ 超级列表框1.取标题 (超级列表框1.现行选中项, 2)
全列表 ＝ 到文本 (加载文件 (配置目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”))
全部地址 ＝ 分割文本 (全列表, #换行符, )
.计次循环首 (9, 已次数)
    图片全 [已次数] ＝ 加载文件 (全部地址 [已次数], 3)
.计次循环尾 ()
显示图片 ()
删除文件 (配置目录 ＋ “img_s\” ＋ 目标地址 ＋ “.jpg”)
删除文件 (配置目录 ＋ “img_b\” ＋ 目标地址 ＋ “.png”)
删除文件 (配置目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”)
删除文件 (文件_取目录 (文本_取出中间文本 (“<1>” ＋ 全部地址 [1], “<1>”, #换行符)) ＋ 目标地址 ＋ “.ini”)

.子程序 _按钮6_被单击

弹送提示 (“已恢复窗口模式”)
程序_延时 (380)
销毁 ()
载入 (_启动窗口, , 假)

.子程序 处理列表, , , 因垃圾易语言加载速度太慢 故废弃 懒得去掉了
.局部变量 索引, 整数型
.局部变量 图片组, 字节集
.局部变量 文件名, 文本型, , "0"
.局部变量 历史列表文本, 文本型
.局部变量 已次数, 整数型
.局部变量 历史列表, 文本型, , "0"
.局部变量 总数量, 整数型
.局部变量 图片文件, 字节集

超级列表框1.可视 ＝ 真
图片组 ＝ 建空图片组 (900, 163)
文件_枚举 (配置目录 ＋ “ini”, “*.ini”, 文件名, 假)
总数量 ＝ 取数组成员数 (文件名)
.计次循环首 (取数组成员数 (文件名), 已次数)
    历史列表文本 ＝ 历史列表文本 ＋ 取文本左边 (文件名 [总数量 － 已次数 ＋ 1], 10) ＋ #换行符
.计次循环尾 ()
历史列表 ＝ 分割文本 (历史列表文本, #换行符, )
.计次循环首 (取数组成员数 (历史列表), 已次数)
    索引 ＝ 超级列表框1.插入表项 (, , , , , )
    超级列表框1.置标题 (索引, 1, 时间_时间戳转文本 (历史列表 [已次数] ＋ “000”))
    超级列表框1.置标题 (索引, 2, 历史列表 [已次数])
    加入图片 (图片组, 加载文件 (配置目录 ＋ “img_s\” ＋ 历史列表 [已次数] ＋ “.jpg”, 2), #白色)
    超级列表框1.图片组 ＝ 图片组
    超级列表框1.置图片 (索引, 0, 已次数 － 1)
    .如果真 (是否停止加载 ＝ 真)
        跳出循环 ()
    .如果真结束

.计次循环尾 ()

.子程序 _按钮8_被单击

.如果 (按钮8.标题 ＝ “历史列表”)
    按钮8.标题 ＝ “关闭列表”
    调试信息 (“列表按钮开始初始化”)
    初始化列表 (, 真)
    调试信息 (“列表按钮初始化完毕”)
    按钮7.可视 ＝ 假
    按钮9.可视 ＝ 假
    选择框1.可视 ＝ 假
    分组框1.调整层次 (1)
    调试信息 (“列表按钮开始预读列表”)
    ' 启动线程 (&预读列表, , )
.否则
    按钮8.标题 ＝ “历史列表”
    分组框1.可视 ＝ 假
    .如果真 (取字节集长度 (图片全 [图片数量]) ＜ 6)
        按钮7.可视 ＝ 真
        按钮9.可视 ＝ 真
        选择框1.可视 ＝ 真
    .如果真结束

.如果结束


.子程序 初始化列表
.参数 指定列表文本, 文本型, 可空
.参数 是否归0, 逻辑型, 可空
.参数 是否只初始化, 逻辑型, 可空
.局部变量 历史列表文本, 文本型
.局部变量 文件名, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 数量文本, 文本型

.如果真 (是否只初始化 ＝ 假)
    分组框1.可视 ＝ 真
.如果真结束
.如果 (指定列表文本 ≠ “”)
    历史列表文本 ＝ 指定列表文本
.否则
    文件_枚举 (配置目录 ＋ “ini”, “*.ini”, 文件名, 假)
    .计次循环首 (取数组成员数 (文件名), 已次数)
        历史列表文本 ＝ 历史列表文本 ＋ 取文本左边 (文件名 [取数组成员数 (文件名) － 已次数 ＋ 1], 10) ＋ #换行符
    .计次循环尾 ()
.如果结束
调试信息 (“初始化列表文件枚举完毕”)
.如果真 (是否归0)
    当前几页 ＝ 0
.如果真结束
列表历史列表 ＝ 分割文本 (历史列表文本, #换行符, )
数量文本 ＝ 到文本 (取数组成员数 (列表历史列表) ÷ 5)
.如果 (快速取出现次数 (数量文本, “.”) ＝ 1)
    页数数量 ＝ 到整数 (文本_取出中间文本 (“A” ＋ 数量文本, “A”, “.”)) ＋ 1
.否则
    页数数量 ＝ 到整数 (数量文本)
.如果结束
调试信息 (“初始化列表详细列表及详细页数获取完毕”)
.如果真 (是否只初始化)
    返回 ()
.如果真结束
标签1.标题 ＝ “总数量:” ＋ 到文本 (取数组成员数 (列表历史列表)) ＋ “ 总页数:” ＋ 到文本 (页数数量) ＋ “ 当前页:” ＋ 到文本 (当前几页 ＋ 1)
.如果真 (显示器高度 ≥ 940)
    .如果 (页数数量 ≥ 100)
        标签1.字体.字体大小 ＝ 17
    .否则
        标签1.字体.字体大小 ＝ 18
    .如果结束

.如果真结束
调试信息 (“总数量:” ＋ 到文本 (取数组成员数 (列表历史列表)) ＋ “ 总页数:” ＋ 到文本 (页数数量) ＋ “ 当前页:” ＋ 到文本 (当前几页 ＋ 1))
调试信息 (“读取搜索记录”)
读取搜索记录 ()
调试信息 (“初始化列表开始加载列表”)
启动线程 (&加载列表, , )

.子程序 加载列表
.局部变量 已次数, 整数型
.局部变量 图片的, 图片框
.局部变量 标签的, 标签
.局部变量 地址的, 标签

' 如果真 (预读列表线程 ≠ 0)
' 计次循环首 (5, 已次数)
' 如果真 (缓存状态 ＝ 假)
' 如果真 (预读列表线程 ≠ 0)
' 关闭线程句柄 (预读列表线程)
' 调试信息 (“发现冲突，已在未写缓存时终止预读线程，耗时毫秒” ＋ 到文本 (已次数))
' 跳出循环 ()
' 延时 (1)
' 测试没用暂时注释掉
.计次循环首 (5, 已次数)
    标签的 ＝ 取标记组件 (已次数 ＋ 10)
    图片的 ＝ 取标记组件 (已次数 ＋ 20)
    调试信息 (到文本 (已次数) ＋ “次” ＋ 到文本 (当前几页 ＋ 1) ＋ “页加载列表已指定组件”)
    .如果 (已次数 ＋ 当前几页 × 5 ＞ 取数组成员数 (列表历史列表))
        标签的.标题 ＝ “时间:超出范围”
        图片的.图片 ＝ #图片1
    .否则
        调试信息 (到文本 (已次数) ＋ “次” ＋ 到文本 (当前几页 ＋ 1) ＋ “页取完数量，开始读取”)
        标签的.标题 ＝ “时间:” ＋ 时间_时间戳转文本 (列表历史列表 [已次数 ＋ 当前几页 × 5] ＋ “000”)
        调试信息 (到文本 (已次数) ＋ “次” ＋ 到文本 (当前几页 ＋ 1) ＋ “页设好标签，读入图片”)
        图片的.图片 ＝ 加载文件 (配置目录 ＋ “img_b\” ＋ 列表历史列表 [已次数 ＋ 当前几页 × 5] ＋ “.png”, 2)
        调试信息 (到文本 (已次数) ＋ “次” ＋ 到文本 (当前几页 ＋ 1) ＋ “页已读入图片，开始判断/处理事件”)
        .如果真 (取字节集长度 (图片的.图片) ＜ 10)
            调试信息 (到文本 (已次数) ＋ “次” ＋ 到文本 (当前几页 ＋ 1) ＋ “png图片过小，开始读入jpg”)
            图片的.图片 ＝ 加载文件 (配置目录 ＋ “img_s\” ＋ 列表历史列表 [已次数 ＋ 当前几页 × 5] ＋ “.jpg”, 2)
        .如果真结束

    .如果结束
    处理事件 ()
    调试信息 (到文本 (已次数) ＋ “次” ＋ 到文本 (当前几页 ＋ 1) ＋ “页加载列表已打开图片”)
.计次循环尾 ()
调试信息 (到文本 (到长整数 (时间_取现行时间戳 ()) － 计时3) ＋ “翻页到显示完成所耗时间”)
调试信息 (“加载列表开始加载目录”)
.计次循环首 (5, 已次数)
    地址的 ＝ 取标记组件 (已次数 ＋ 30)
    调试信息 (到文本 (已次数) ＋ “次” ＋ 到文本 (当前几页 ＋ 1) ＋ “页加载列表开始加载地址”)
    .如果 (已次数 ＋ 当前几页 × 5 ＞ 取数组成员数 (列表历史列表))
        地址的.标题 ＝ “位置:超出范围”
    .否则
        ' 文件号 ＝ 打开文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数 ＋ 当前几页 × 5] ＋ “.ini”, , )
        ' 地址的.标题 ＝ “位置:” ＋ 文件_取目录 (文本_取出中间文本 (“<1>” ＋ 读入文本 (文件号, ), “<1>”, #换行符))
        ' 关闭文件 (文件号)
        地址的.标题 ＝ “位置:” ＋ 文件_取目录 (文本_取出中间文本 (“<1>” ＋ 到文本 (加载文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数 ＋ 当前几页 × 5] ＋ “.ini”, 1)), “<1>”, #换行符))
    .如果结束

.计次循环尾 ()
列表上页.禁止 ＝ 假
列表跳转.禁止 ＝ 假
.如果真 (是否等待缓存 ＝ 假 或 设置缓存级别 ＝ 0)
    列表下页.禁止 ＝ 假
.如果真结束



' 启动线程 (&加载大图, , 大图线程)

.子程序 预读列表
.局部变量 已次数, 整数型

.计次循环首 (5, 已次数)
    .如果 (已次数 ＋ (当前几页 ＋ 1) × 5 ＞ 取数组成员数 (列表历史列表))
        ' 超出范围
    .否则
        .如果真 (设置缓存级别 ≥ 1)
            加载文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数 ＋ (当前几页 ＋ 1) × 5] ＋ “.ini”, 1)
        .如果真结束
        .如果真 (设置缓存级别 ≥ 2)
            加载文件 (配置目录 ＋ “img_b\” ＋ 列表历史列表 [已次数 ＋ (当前几页 ＋ 1) × 5] ＋ “.png”, 2)
        .如果真结束
        调试信息 (到文本 (已次数) ＋ “次” ＋ 到文本 (当前几页 ＋ 2) ＋ “页已缓存b浏览图”)
    .如果结束

.计次循环尾 ()
.计次循环首 (5, 已次数)
    .如果真 (已次数 ＋ 当前几页 × 5 ≤ 取数组成员数 (列表历史列表) 且 设置缓存级别 ≥ 2)
        加载文件 (配置目录 ＋ “img_s\” ＋ 列表历史列表 [已次数 ＋ 当前几页 × 5] ＋ “.jpg”, 2)
        调试信息 (到文本 (已次数) ＋ “次” ＋ 到文本 (当前几页 ＋ 1) ＋ “页已缓存s浏览图”)
    .如果真结束
    ' 为保证快速翻页，缓存列表显示的浏览图之后再缓存打开时使用的浏览图
.计次循环尾 ()
预读列表线程 ＝ 0
.如果真 (是否等待缓存 ＝ 真 且 设置缓存级别 ＞ 0)
    列表下页.禁止 ＝ 假
.如果真结束


.子程序 加载大图, , , 因发现PNG“大图”加载更快 故废弃
.局部变量 已次数, 整数型
.局部变量 图片的, 图片框
.局部变量 地址的, 标签

.计次循环首 (5, 已次数)
    图片的 ＝ 取标记组件 (已次数 ＋ 20)
    .如果 (已次数 ＋ 当前几页 × 5 ＞ 取数组成员数 (列表历史列表))
        图片的.图片 ＝ #图片1
    .否则
        .如果真 (文件是否存在 (配置目录 ＋ “img_b\” ＋ 列表历史列表 [已次数 ＋ 当前几页 × 5] ＋ “.png”))
            图片的.图片 ＝ 加载文件 (配置目录 ＋ “img_b\” ＋ 列表历史列表 [已次数 ＋ 当前几页 × 5] ＋ “.png”, 3)
        .如果真结束

    .如果结束

.计次循环尾 ()

.子程序 _列表下页_被单击

计时3 ＝ 到长整数 (时间_取现行时间戳 ())
.如果真 (当前几页 ＋ 1 ＜ 页数数量)
    列表下页.禁止 ＝ 真
    当前几页 ＝ 当前几页 ＋ 1
    标签1.标题 ＝ “总数量:” ＋ 到文本 (取数组成员数 (列表历史列表)) ＋ “ 总页数:” ＋ 到文本 (页数数量) ＋ “ 当前页:” ＋ 到文本 (当前几页 ＋ 1)
    启动线程 (&加载列表, , )
    .如果真 (设置缓存级别 ＞ 0)
        启动线程 (&预读列表, , 预读列表线程)
    .如果真结束

.如果真结束


.子程序 _列表上页_被单击

.如果真 (当前几页 ≠ 0)
    列表上页.禁止 ＝ 真
    当前几页 ＝ 当前几页 － 1
    标签1.标题 ＝ “总数量:” ＋ 到文本 (取数组成员数 (列表历史列表)) ＋ “ 总页数:” ＋ 到文本 (页数数量) ＋ “ 当前页:” ＋ 到文本 (当前几页 ＋ 1)
    启动线程 (&加载列表, , )
.如果真结束


.子程序 快速取出现次数, 整数型
.参数 全部文本, 文本型
.参数 要找的文本, 文本型
.局部变量 全部内容, 快速文本对象

全部内容.置文本 (全部文本)
返回 (全部内容.替换子文本 (要找的文本, “”, , , 真))

.子程序 _列表跳转_被单击

.如果真 (到整数 (编辑框1.内容) ≠ 0)
    列表跳转.禁止 ＝ 真
    当前几页 ＝ 到整数 (编辑框1.内容) － 1
    标签1.标题 ＝ “总数量:” ＋ 到文本 (取数组成员数 (列表历史列表)) ＋ “ 总页数:” ＋ 到文本 (页数数量) ＋ “ 当前页:” ＋ 到文本 (当前几页 ＋ 1)
    启动线程 (&加载列表, , )
.如果真结束


.子程序 载入目标图片, , , 从历史列表载入
.参数 第几页, 整数型
.参数 第几张, 整数型
.局部变量 已次数, 整数型
.局部变量 全部地址, 文本型, , "0"
.局部变量 目标地址, 文本型
.局部变量 是否反向, 逻辑型
.局部变量 是否等高, 逻辑型
.局部变量 是否waifu2x, 逻辑型
.局部变量 读入文本, 文本型
.局部变量 标签的, 透明标签
.局部变量 临时计时, 长整数型
.局部变量 大浏览图图片, 字节集

初始化显示 ()
是否保存大图 ＝ 真
历史列表打开 ＝ 真
waifu2x状态 ＝ 假
裁剪状态 ＝ 假
目标地址 ＝ 列表历史列表 [第几张 ＋ 第几页 × 5]
全列表 ＝ 到文本 (加载文件 (配置目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”, 1))
全部地址 ＝ 分割文本 (全列表, #换行符, )
.如果真 (图片数量 ≠ 取数组成员数 (全部地址))
    .如果 (快速取出现次数 (到文本 (取数组成员数 (全部地址) ÷ 显示器数量), “.”) ＝ 0)
        图片数量 ＝ 取数组成员数 (全部地址)
        设定图片数量 ()
        弹送提示 (“已修改应用为每屏” ＋ 到文本 (到整数 (图片数量 ÷ 显示器数量)) ＋ “图共” ＋ 到文本 (图片数量) ＋ “图，未保存！”)
    .否则
        .如果真 (图片数量 ＞ 取数组成员数 (全部地址))
            信息框 (“运行时出错!” ＋ #换行符 ＋ #换行符 ＋ “错误信息：读取到图片数量少于设定图片数量”, 16, “错误”, )
        .如果真结束

    .如果结束

.如果真结束
读入文本 ＝ 到文本 (加载文件 (配置目录 ＋ “set\” ＋ 目标地址 ＋ “.ini”, 1))
临时计时 ＝ 到长整数 (时间_取现行时间戳 ())
大浏览图图片 ＝ 加载文件 (配置目录 ＋ “img_s\” ＋ 目标地址 ＋ “.jpg”, 2)
图片框大浏览.图片 ＝ 大浏览图图片
大浏览调整层次 ()
处理事件 ()
图片框大浏览.可视 ＝ 真
_启动窗口.边框 ＝ 0
_启动窗口.高度 ＝ 显示器高度


调试信息 (“大浏览目录” ＋ 配置目录 ＋ “img_s\” ＋ 目标地址 ＋ “.jpg” ＋ 到文本 (取字节集长度 (图片框大浏览.图片)) ＋ “大浏览文件尺寸”)
调试信息 (“显示大浏览图总耗时” ＋ 到文本 (到长整数 (时间_取现行时间戳 ()) － 临时计时) ＋ “毫秒”)
.如果 (快速取出现次数 (读入文本, “裁剪”) ＝ 0 或 到长整数 (目标地址) ＜ 1516107600)
    .如果 (快速取出现次数 (读入文本, “反向”) ≠ 0)
        等待完成 ()
        _按钮5_被单击 ()
        .如果 (背景颜色 ＝ 16777215)
            箭头.图片 ＝ #黑反
        .否则
            箭头.图片 ＝ #白反
        .如果结束

    .否则
        .计次循环首 (图片数量, 已次数)
            图片全 [已次数] ＝ 加载文件 (全部地址 [已次数], 3)
            标签的 ＝ 取标记组件 (已次数 ＋ 300)
            标签的.标题 ＝ 文件_取文件名 (全部地址 [已次数], 真)
        .计次循环尾 ()
        显示图片 ()
        .如果 (背景颜色 ＝ 16777215)
            箭头.图片 ＝ #黑正
        .否则
            箭头.图片 ＝ #白正
        .如果结束

    .如果结束

.否则
    .如果 (快速取出现次数 (读入文本, “反向”) ≠ 0)
        反向状态 ＝ 真
        按钮5.标题 ＝ “正向”
    .否则
        按钮5.标题 ＝ “反向”
        反向状态 ＝ 假
    .如果结束

.如果结束
.如果真 (创建新记录 () ＝ 假)
    弹送提示 (“历史记录创建失败，原记录文件可能消失”)
.如果真结束


调试信息 (目标地址 ＋ 读入文本 ＋ “打开后读入设定”)
.如果真 (快速取出现次数 (读入文本, “反向”) ≠ 0)
    ' 等待完成 ()
    ' _按钮5_被单击 ()
.如果真结束

.如果真 (快速取出现次数 (读入文本, “裁剪”) ≠ 0)
    等待完成 ()
    _按钮12_被单击 ()
.如果真结束

.如果真 (快速取出现次数 (读入文本, “等高”) ≠ 0)
    等待完成 ()
    _按钮1_被单击 ()
.如果真结束
.如果真 (快速取出现次数 (读入文本, “waifu2x”) ≠ 0)
    waifu2x缩放 ()
.如果真结束
调试信息 (“开始删除”)
删除文件 (配置目录 ＋ “img_s\” ＋ 目标地址 ＋ “.jpg”)
删除文件 (配置目录 ＋ “img_b\” ＋ 目标地址 ＋ “.png”)
删除文件 (配置目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”)
删除文件 (配置目录 ＋ “set\” ＋ 目标地址 ＋ “.ini”)
删除文件 (文件_取目录 (全部地址 [1]) ＋ 目标地址 ＋ “.ini”)
调试信息 (文件_取目录 (全部地址 [1]) ＋ 目标地址 ＋ “.ini”)
' 不做判断失败不删除是因为即使失败，当前时间也被更新，后续创建文件记录名会与ini不同


.子程序 大浏览调整层次
.参数 是否不调整浏览, 逻辑型, 可空

.如果真 (是否不调整浏览 ＝ 假)
    图片框大浏览.调整层次 (1)
.如果真结束
' 箭头.调整层次 (1) 发现箭头不能透明，之后再改
按钮1.调整层次 (1)
按钮4.调整层次 (1)
按钮5.调整层次 (1)
按钮8.调整层次 (1)
按钮6.调整层次 (1)
按钮2.调整层次 (1)
按钮3.调整层次 (1)
按钮10.调整层次 (1)
按钮11.调整层次 (1)
按钮12.调整层次 (1)
透明标签1.调整层次 (1)

.子程序 等待完成

处理事件 ()
延时 (50)
处理事件 ()
延时 (50)
处理事件 ()

.子程序 _列表按钮1_被单击

计时 ＝ 取启动时间 ()
载入目标图片 (当前几页, 1)

.子程序 _列表按钮2_被单击

载入目标图片 (当前几页, 2)

.子程序 _列表按钮3_被单击

载入目标图片 (当前几页, 3)

.子程序 _列表按钮4_被单击

载入目标图片 (当前几页, 4)

.子程序 _列表按钮5_被单击

载入目标图片 (当前几页, 5)

.子程序 删除索引信息
.参数 第几页, 整数型
.参数 第几张, 整数型
.局部变量 目标地址, 文本型

目标地址 ＝ 列表历史列表 [第几张 ＋ 第几页 × 5]
写到文件 (配置目录 ＋ “backup\” ＋ 目标地址 ＋ “.ini”, 到字节集 (加载文件 (配置目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”, 1)))
删除文件 (配置目录 ＋ “img_s\” ＋ 目标地址 ＋ “.jpg”)
删除文件 (配置目录 ＋ “img_b\” ＋ 目标地址 ＋ “.png”)
删除文件 (配置目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”)
删除文件 (配置目录 ＋ “set\” ＋ 目标地址 ＋ “.ini”)
.如果 (列表搜索.标题 ＝ “搜索”)
    初始化列表 ()
.否则
    .如果真 (设置缓存级别 ≠ 0)
        清空缓存 ()
    .如果真结束
    ' 删除后若在搜索界面，是会让他再搜索一次来实现删除项目消失，但开启缓存后。。访问已删除项目不再去读取文件，所以依然会被搜索到，导致搜索界面里点击删除后实际可以删除但列表仍然显示
    ' 所以先清空缓存后再搜索一次     而初始化列表时是扫描文件夹内的文件，然后在读取，这样文件不存在后就不会显示了，所以不会出现这个问题 这里清空缓存来解决比较省事
    列表搜索 (假)
.如果结束
弹送提示 (“已删除并备份到backup”)


.子程序 加入收藏
.参数 第几页, 整数型
.参数 第几张, 整数型
.局部变量 目标地址, 文本型

目标地址 ＝ 列表历史列表 [第几张 ＋ 第几页 × 5]
.如果 (收藏的目录 ＝ “”)
    弹送提示 (“未设置收藏的目录，无法加入收藏！”)
.否则
    写到文件 (收藏的目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”, 到字节集 (加载文件 (配置目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”)))
    写到文件 (收藏的目录 ＋ “img_s\” ＋ 目标地址 ＋ “.jpg”, 到字节集 (加载文件 (配置目录 ＋ “img_s\” ＋ 目标地址 ＋ “.jpg”)))
    写到文件 (收藏的目录 ＋ “img_b\” ＋ 目标地址 ＋ “.png”, 到字节集 (加载文件 (配置目录 ＋ “img_b\” ＋ 目标地址 ＋ “.png”)))
    .如果真 (文件_是否存在 (配置目录 ＋ “set\” ＋ 目标地址 ＋ “.ini”))
        写到文件 (收藏的目录 ＋ “set\” ＋ 目标地址 ＋ “.ini”, 到字节集 (加载文件 (配置目录 ＋ “set\” ＋ 目标地址 ＋ “.ini”)))
    .如果真结束
    弹送提示 (“已收藏”)
    调试信息 (收藏的目录 ＋ “收藏目录”)
.如果结束


.子程序 _收藏按钮1_被单击

加入收藏 (当前几页, 1)

.子程序 _收藏按钮2_被单击

加入收藏 (当前几页, 2)

.子程序 _收藏按钮3_被单击

加入收藏 (当前几页, 3)

.子程序 _收藏按钮4_被单击

加入收藏 (当前几页, 4)

.子程序 _收藏按钮5_被单击

加入收藏 (当前几页, 5)

.子程序 清空缓存

清除数组 (缓存_目录)
清除数组 (缓存_文件)

.子程序 _删除按钮1_被单击

删除索引信息 (当前几页, 1)

.子程序 _删除按钮2_被单击

删除索引信息 (当前几页, 2)

.子程序 _删除按钮3_被单击

删除索引信息 (当前几页, 3)

.子程序 _删除按钮4_被单击

删除索引信息 (当前几页, 4)

.子程序 _删除按钮5_被单击

删除索引信息 (当前几页, 5)

.子程序 打开所在文件夹
.参数 第几页, 整数型
.参数 第几张, 整数型
.局部变量 目标地址, 文本型

目标地址 ＝ 列表历史列表 [第几张 ＋ 第几页 × 5]
执行 (4, 文件_取目录 (文本_取出中间文本 (“<1>” ＋ 到文本 (加载文件 (配置目录 ＋ “ini\” ＋ 目标地址 ＋ “.ini”, 1)), “<1>”, #换行符)), , , )

.子程序 _文件夹按钮1_被单击

打开所在文件夹 (当前几页, 1)

.子程序 _文件夹按钮2_被单击

打开所在文件夹 (当前几页, 2)

.子程序 _文件夹按钮3_被单击

打开所在文件夹 (当前几页, 3)

.子程序 _文件夹按钮4_被单击

打开所在文件夹 (当前几页, 4)

.子程序 _文件夹按钮5_被单击

打开所在文件夹 (当前几页, 5)

.子程序 _列表搜索_被单击

列表搜索按钮状态 ()

.子程序 列表搜索按钮状态
.参数 是否只搜索, 逻辑型, 可空

列表搜索.禁止 ＝ 真
组合框1.发送信息 (335, 0, 0)  ' 收起组合框
.如果真 (是否只搜索 且 列表搜索.标题 ≠ “搜索”)
    初始化列表 (, 真)
    程序_延时 (300)
    列表搜索 (真)
    列表搜索.禁止 ＝ 假
    返回 ()
.如果真结束
.如果 (列表搜索.标题 ＝ “搜索”)
    .如果真 (编辑框2.内容 ≠ “”)
        列表搜索.标题 ＝ “返回”
        ' 启动线程 (&列表搜索, , )
        列表搜索 (真)
    .如果真结束

.否则
    列表搜索.标题 ＝ “搜索”
    初始化列表 (, 真)
.如果结束
列表搜索.禁止 ＝ 假

.子程序 列表搜索
.参数 是否归0, 逻辑型, 可空
.局部变量 已次数, 整数型
.局部变量 全部地址, 文本型, , "0"
.局部变量 目标地址, 文本型
.局部变量 目标文本, 文本型
.局部变量 找出列表, 文本型

' 分组框1.可视 ＝ 假
目标文本 ＝ 编辑框2.内容
.如果真 (加速搜索线程 ≠ 0)
    调试信息 (“发现加速搜索预缓存线程仍在进行，干掉他”)
    强制结束线程 (加速搜索线程)
.如果真结束
计时 ＝ 取启动时间 ()
.计次循环首 (取数组成员数 (列表历史列表), 已次数)
    .如果真 (寻找文本 (到文本 (加载文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数] ＋ “.ini”, 1)), 目标文本, , 真) ≠ -1)
        找出列表 ＝ 找出列表 ＋ 列表历史列表 [已次数] ＋ #换行符
    .如果真结束

.计次循环尾 ()
调试信息 (“搜索耗时毫秒” ＋ 到文本 (取启动时间 () － 计时))
.如果真 (找出列表 ＝ “”)
    列表搜索.标题 ＝ “搜索”
    弹送提示 (“搜索不到结果”)
    返回 ()
.如果真结束
初始化列表 (找出列表, 是否归0)
写入搜索记录 (目标文本)
.如果真 (设置缓存级别 ≠ 0)
    状态_是否已加速搜索 ＝ 真
    进度条1.可视 ＝ 真
    进度条1.位置 ＝ 进度条1.最大位置
.如果真结束


.子程序 删除目标重复文件, , , ‘旧版(4.0)出现BUG从历史列表打开时在图片所在目录写入新ini后忘记删除旧ini 用了一段时间后出现大量ini记录文件 所以临时做了这个全删了重新写入
.局部变量 已次数, 整数型
.局部变量 文件号, 整数型
.局部变量 全部地址, 文本型, , "0"
.局部变量 目标地址, 文本型
.局部变量 目标文本, 文本型
.局部变量 文件名, 文本型, , "0"
.局部变量 找出列表, 文本型
.局部变量 列表内容, 文本型
.局部变量 已二次数, 整数型
.局部变量 当前目录, 文本型

分组框1.可视 ＝ 假
目标文本 ＝ 编辑框2.内容
.计次循环首 (取数组成员数 (列表历史列表), 已次数)
    文件号 ＝ 打开文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数] ＋ “.ini”, , )
    列表内容 ＝ 读入文本 (文件号, )
    关闭文件 (文件号)
    当前目录 ＝ 文件_取目录 (文本_取出中间文本 (“<1>” ＋ 列表内容, “<1>”, #换行符))
    文件_枚举 (当前目录, “*.ini”, 文件名, 假)
    .计次循环首 (取数组成员数 (文件名), 已二次数)
        .如果真 (到长整数 (文本_取出中间文本 (“<A1>” ＋ 文件名 [已二次数], “<A1>”, “.ini”)) ＞ 1480000000 且 到长整数 (文本_取出中间文本 (“<A1>” ＋ 文件名 [已二次数], “<A1>”, “.ini”)) ＜ 1496000000)
            删除文件 (当前目录 ＋ 文件名 [已二次数])
        .如果真结束

    .计次循环尾 ()
    写到文件 (当前目录 ＋ 列表历史列表 [已次数] ＋ “.ini”, 到字节集 (列表内容))
    调试信息 (取数组成员数 (列表历史列表), 已次数)
.计次循环尾 ()

.子程序 _按钮7_被单击
.局部变量 转换图片, 字节集
.局部变量 图片左, 字节集
.局部变量 图片右, 字节集

转换图片 ＝ 加载文件 (上次接收, 3)
图片_转换 (转换图片, 1, , 转换图片)
图片左 ＝ 图片_取图片区域 (转换图片, 0, 0, 四舍五入 (取图片宽度 (上次接收) ÷ 2, 0), 取图片高度 (上次接收))
图片右 ＝ 图片_取图片区域 (转换图片, 四舍五入 (取图片宽度 (上次接收) ÷ 2, 0), 0, 四舍五入 (取图片宽度 (上次接收) ÷ 2, 0), 取图片高度 (上次接收))
图片_转换 (图片左, 5, , 图片左)
图片_转换 (图片右, 5, , 图片右)
.如果 (选择框1.选中 ＝ 真)
    写到文件 (上次接收 ＋ “.02.png”, 图片右)
    写到文件 (上次接收 ＋ “.01.png”, 图片左)
.否则
    写到文件 (上次接收 ＋ “.02.png”, 图片左)
    写到文件 (上次接收 ＋ “.01.png”, 图片右)
.如果结束
运行 (取运行目录 () ＋ “\” ＋ 取执行文件名 (), 假, )
结束 ()

.子程序 _按钮9_被单击
.局部变量 转换图片, 字节集
.局部变量 图片左, 字节集
.局部变量 图片右, 字节集
.局部变量 图片中, 字节集
.局部变量 图片顶, 整数型
.局部变量 图片高, 整数型

转换图片 ＝ 加载文件 (上次接收, 3)
图片_转换 (转换图片, 1, , 转换图片)
.如果 (取图片宽度 (上次接收) ÷ 16 ＝ 取图片高度 (上次接收) ÷ 9)
    图片顶 ＝ 四舍五入 (取图片高度 (上次接收) × 20 ÷ 1080, 0)
    图片高 ＝ 取图片高度 (上次接收) － 四舍五入 (取图片高度 (上次接收) × 20 ÷ 1080, 0) × 2
    ' 从上下分别裁剪相当于1920x1080的20像素 适配1920x(1080-40)的带任务栏全屏显示
.否则
    图片顶 ＝ 0
    图片高 ＝ 取图片高度 (上次接收)
.如果结束
图片左 ＝ 图片_取图片区域 (转换图片, 0, 图片顶, 四舍五入 (取图片宽度 (上次接收) ÷ 3, 0), 图片高)
图片右 ＝ 图片_取图片区域 (转换图片, 四舍五入 (取图片宽度 (上次接收) ÷ 3, 0) × 2, 图片顶, 四舍五入 (取图片宽度 (上次接收) ÷ 3, 0), 图片高)
图片中 ＝ 图片_取图片区域 (转换图片, 四舍五入 (取图片宽度 (上次接收) ÷ 3, 0), 图片顶, 四舍五入 (取图片宽度 (上次接收) ÷ 3, 0), 图片高)
图片_转换 (图片左, 5, , 图片左)
图片_转换 (图片中, 5, , 图片中)
图片_转换 (图片右, 5, , 图片右)
.如果 (选择框1.选中 ＝ 真)
    写到文件 (上次接收 ＋ “.03.png”, 图片右)
    写到文件 (上次接收 ＋ “.01.png”, 图片左)
.否则
    写到文件 (上次接收 ＋ “.03.png”, 图片左)
    写到文件 (上次接收 ＋ “.01.png”, 图片右)
.如果结束
写到文件 (上次接收 ＋ “.02.png”, 图片中)
运行 (取运行目录 () ＋ “\” ＋ 取执行文件名 (), 假, )
结束 ()

.子程序 _按钮1_被单击

等高缩放 (显示器数量, 显示器高度, 显示器宽度, 图片数量)
等高状态 ＝ 真
时钟1.时钟周期 ＝ 1


.子程序 _按钮2_被单击

载入 (窗口1, , 真)
.如果真 (设置是否更改)
    启动程序 ()

.如果真结束


.子程序 弹送提示
.参数 提示内容, 文本型
.参数 是否等待, 逻辑型, 可空

提示传递信息 ＝ 提示内容
载入 (提示信息, , 是否等待)


.子程序 加载文件, 字节集, , 带缓存,加载后缓存到内存里,加快重复读取速度
.参数 文件目录, 文本型
.参数 缓存级别, 整数型, 可空, 越小优先级越高,ini=1,浏览图=2,大图=3,不缓存=0
.局部变量 已次数, 整数型
.局部变量 计算时间, 长整数型
.局部变量 读入文件, 字节集

' 计算时间 ＝ 到长整数 (时间_取现行时间戳 ())
.如果真 (缓存级别 ≠ 0 且 设置缓存级别 ≠ 0)
    .计次循环首 (取数组成员数 (缓存_目录), 已次数)
        .如果真 (缓存_目录 [已次数] ＝ 文件目录)
            返回 (缓存_文件 [已次数])
        .如果真结束

    .计次循环尾 ()
.如果真结束
读入文件 ＝ 读入文件 (文件目录)
.如果真 (设置缓存级别 ≠ 0 且 设置缓存级别 ≥ 缓存级别)
    .如果真 (缓存状态 ＝ 假)
        缓存状态 ＝ 真
        加入成员 (缓存_目录, 文件目录)
        加入成员 (缓存_文件, 读入文件)
        缓存状态 ＝ 假
    .如果真结束

.如果真结束
返回 (读入文件)


.子程序 处理函数_希尔_常规文本, 整数型, , 来自七号通用排序
.参数 处理类型, 整数型, , 0:索引2的值覆盖索引1的值 1.保存索引1值到临时变量 2.将临时变量还原至索引1 3.临时变量与索引1的值比较(临时变量大于索引1的值返回1，等于返回0，小于返回-1)
.参数 索引1, 整数型, , 索引从1开始
.参数 索引2, 整数型, , 索引从1开始
.参数 自定义参数, 整数型
.局部变量 临时变量, 文本型, 静态, , 静态一定要勾选，否则此数据会丢失。本变量的数据类型根据自己的需要修改

.判断开始 (处理类型 ＝ 0)  ' 索引2的值覆盖索引1的值
    待排序数组 [索引1] ＝ 待排序数组 [索引2]
.判断 (处理类型 ＝ 1)  ' 保存索引1值到临时变量
    临时变量 ＝ 待排序数组 [索引1]
.判断 (处理类型 ＝ 2)  ' 将临时变量还原至索引1
    待排序数组 [索引1] ＝ 临时变量
.判断 (处理类型 ＝ 3)  ' 临时变量与索引1的值比较(临时变量大于索引1的值返回1，等于返回0，小于-1)
    .判断开始 (临时变量 ＞ 待排序数组 [索引1])  ' 临时变量大于索引1的值返回1..嘿嘿，文本也是可以这样比较的，你学会了吗？
        返回 (1)
    .判断 (临时变量 ＝ 待排序数组 [索引1])  ' 临时变量等于索引1的值返回0..嘿嘿，文本也是可以这样比较的，你学会了吗？
        返回 (0)
    .判断 (临时变量 ＜ 待排序数组 [索引1])  ' 临时变量小于索引1的值返回-1..嘿嘿，文本也是可以这样比较的，你学会了吗？
        返回 (-1)
    .默认
        返回 (-1)  ' 默认比较结果
    .判断结束

.默认

.判断结束
返回 (0)  ' 其他返回任意值


.子程序 处理函数_希尔_数字文本, 整数型, , 来自七号通用排序
.参数 处理类型, 整数型, , 0:索引2的值覆盖索引1的值 1.保存索引1值到临时变量 2.将临时变量还原至索引1 3.临时变量与索引1的值比较(临时变量大于索引1的值返回1，等于返回0，小于返回-1)
.参数 索引1, 整数型, , 索引从1开始
.参数 索引2, 整数型, , 索引从1开始
.参数 自定义参数, 整数型
.局部变量 临时变量, 文本型, 静态, , 静态一定要勾选，否则此数据会丢失。本变量的数据类型根据自己的需要修改

.判断开始 (处理类型 ＝ 0)  ' 索引2的值覆盖索引1的值
    待排序数组 [索引1] ＝ 待排序数组 [索引2]
.判断 (处理类型 ＝ 1)  ' 保存索引1值到临时变量
    临时变量 ＝ 待排序数组 [索引1]
.判断 (处理类型 ＝ 2)  ' 将临时变量还原至索引1
    待排序数组 [索引1] ＝ 临时变量
.判断 (处理类型 ＝ 3)  ' 临时变量与索引1的值比较(临时变量大于索引1的值返回1，等于返回0，小于-1)
    .判断开始 (到整数 (临时变量) ＞ 到整数 (待排序数组 [索引1]))  ' 临时变量大于索引1的值返回1
        返回 (1)
    .判断 (到整数 (临时变量) ＝ 到整数 (待排序数组 [索引1]))  ' 临时变量等于索引1的值返回0
        返回 (0)
    .判断 (到整数 (临时变量) ＜ 到整数 (待排序数组 [索引1]))  ' 临时变量小于索引1的值返回-1
        返回 (-1)
    .默认
        返回 (-1)  ' 默认比较结果
    .判断结束

.默认

.判断结束
返回 (0)  ' 其他返回任意值

.子程序 调试信息, , , 看起来屌，顺便方便我日常使用时发现BUG立刻DEBUG
.参数 输出信息, 文本型
.局部变量 调试次数, 整数型
.局部变量 已次数, 整数型
.局部变量 当前信息, 文本型
.局部变量 处理信息, 文本型

.如果真 (是否隐藏调试 ＝ 假)
    .如果 (是否详细调试)
        处理信息 ＝ 时间_到文本 (, 1, 3) ＋ “ ” ＋ 输出信息
    .否则
        处理信息 ＝ 输出信息
    .如果结束
    ' 如果真 (快速取出现次数 (处理信息, #换行符) ≠ 0)
    ' 处理信息 ＝ 文本_替换 (处理信息, , , , #换行符, “[换行]”)
    调试输出 (处理信息)
    全调试信息 ＝ 全调试信息 ＋ #换行符 ＋ 处理信息
    .如果 (显示器高度 ＜ 940)
        调试次数 ＝ 52
    .否则
        调试次数 ＝ 74
    .如果结束
    .计次循环首 (调试次数 － 1, 已次数)
        调试显示 [已次数] ＝ 调试显示 [已次数 ＋ 1]
    .计次循环尾 ()
    调试显示 [调试次数] ＝ 处理信息
    .如果真 (是否详细调试)
        写到文件 (取运行目录 () ＋ “\log\A” ＋ 到文本 (调试_软件启动时间) ＋ “.log”, 到字节集 (全调试信息))
    .如果真结束

.如果真结束


.子程序 _时钟2_周期事件
.局部变量 调试全信息, 文本型
.局部变量 已次数, 整数型
.局部变量 调试次数, 整数型

.如果 (显示器高度 ＜ 940)
    调试次数 ＝ 52
.否则
    调试次数 ＝ 74
.如果结束
.计次循环首 (调试次数, 已次数)
    调试全信息 ＝ 调试全信息 ＋ 调试显示 [已次数] ＋ #换行符
.计次循环尾 ()
.如果真 (调试全信息 ≠ 上次调试信息)
    透明标签1.标题 ＝ 调试全信息
.如果真结束
上次调试信息 ＝ 调试全信息
透明标签1.调整层次 (1)

.子程序 _按钮3_被单击

置剪辑板文本 (全调试信息)
弹送提示 (“已复制全部调试信息到剪辑板”)
' 按钮3.可视 ＝ 假
透明标签1.可视 ＝ 真
透明标签1.左边 ＝ 0
透明标签1.顶边 ＝ 24
透明标签1.宽度 ＝ 显示器宽度
透明标签1.高度 ＝ 888
.如果真 (显示器高度 ＜ 940)
    透明标签1.高度 ＝ 624
.如果真结束
时钟2.时钟周期 ＝ 200


.子程序 _悬停时钟_周期事件
.局部变量 已次数, 整数型
.局部变量 图片的, 图片框
.局部变量 是否处理过, 逻辑型
.局部变量 鼠标所在句柄, 整数型

鼠标所在句柄 ＝ 取鼠标所在窗口句柄 ()
.计次循环首 (5, 已次数)
    图片的 ＝ 取标记组件 (20 ＋ 已次数)
    .如果真 (鼠标所在句柄 ＝ 图片的.取窗口句柄 () 且 已次数 ＋ 当前几页 × 5 ≤ 取数组成员数 (列表历史列表) 且 编辑框焦点 ＝ 假)
        .如果真 (悬停时钟.时钟周期 ＝ 100)
            悬停时钟.时钟周期 ＝ 20
        .如果真结束
        是否处理过 ＝ 真
        .如果 (上次鼠标图片 ＝ 已次数 ＋ 当前几页 × 5)
            鼠标持续次数 ＝ 鼠标持续次数 ＋ 1
            ' 显示时间600，÷快速时钟20=30，再减去慢速时钟可能错过的平均3次
            .如果真 (鼠标持续次数 ＝ 27)
                调试信息 (“显示” ＋ 到文本 (已次数))
                显示大浏览 (已次数)
            .如果真结束

        .否则
            .如果 (上次鼠标位置 ≠ 0 且 鼠标持续次数 ≥ 26)
                鼠标持续次数 ＝ 26
            .否则
                鼠标持续次数 ＝ 0
                传递_地址 ＝ “”
            .如果结束
            上次鼠标位置 ＝ 已次数
            上次鼠标图片 ＝ 已次数 ＋ 当前几页 × 5
        .如果结束

    .如果真结束

.计次循环尾 ()
.如果真 (是否处理过 ＝ 假)
    上次鼠标位置 ＝ 0
    上次鼠标图片 ＝ 0
    鼠标持续次数 ＝ 0
    传递_地址 ＝ “”
    悬停时钟.时钟周期 ＝ 100
.如果真结束
' 调试信息 (到文本 (悬停时钟.时钟周期))

.子程序 显示大浏览
.参数 现在几张, 整数型
.局部变量 图片号, 整数型
.局部变量 目标地址, 文本型

目标地址 ＝ 列表历史列表 [现在几张 ＋ 当前几页 × 5]
传递_地址 ＝ 目标地址
.如果 (到长整数 (目标地址) ＞ 1501531200)
    传递_图片 ＝ 加载文件 (配置目录 ＋ “img_s\” ＋ 目标地址 ＋ “.jpg”, 2)
.否则
    传递_图片 ＝ 加载文件 (配置目录 ＋ “img_b\” ＋ 目标地址 ＋ “.png”, 2)  ' 8.5版本之前的jpg画质比png差
.如果结束
载入 (大浏览窗口, , 假)

.子程序 __启动窗口_将被销毁

.如果真 (是否详细调试)
    文件_改名 (取运行目录 () ＋ “\log\A” ＋ 到文本 (调试_软件启动时间) ＋ “.log”, 取运行目录 () ＋ “\log\B” ＋ 到文本 (调试_软件启动时间) ＋ “.log”)
.如果真结束
传递_地址 ＝ “”

.子程序 _组合框1_列表项被选择

编辑框2.内容 ＝ 组合框1.内容
列表搜索按钮状态 (真)


.子程序 弹出组合框

读取搜索记录 ()
组合框1.发送信息 (335, 1, 0)  ' 弹出组合框

.子程序 _编辑框2_鼠标右键被按下, 逻辑型
.参数 横向位置, 整数型
.参数 纵向位置, 整数型
.参数 功能键状态, 整数型

弹出组合框 ()

.子程序 _编辑框2_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

弹出组合框 ()

.子程序 _编辑框2_被双击, 逻辑型
.参数 横向位置, 整数型
.参数 纵向位置, 整数型
.参数 功能键状态, 整数型

弹出组合框 ()
返回 (假)

.子程序 读取搜索记录, 逻辑型, , 没有找到可载入内容时返回假
.参数 指定文本开头, 文本型, 可空, 为空则读取所有文本
.参数 是否缓存, 整数型, 可空, 默认0不缓存，1则为缓存
.局部变量 已次数, 整数型
.局部变量 取多少个, 整数型
.局部变量 是否有内容, 逻辑型

搜索记录 ＝ 分割文本 (到文本 (加载文件 (取运行目录 () ＋ “\搜索记录.ini”, 是否缓存)), #换行符, )
调试信息 (“读取” ＋ 到文本 (加载文件 (取运行目录 () ＋ “\搜索记录.ini”, 是否缓存)))
组合框1.清空 ()
取多少个 ＝ 取数组成员数 (搜索记录)
.如果真 (取多少个 ＞ 6 且 指定文本开头 ＝ “”)
    取多少个 ＝ 6
.如果真结束
.计次循环首 (取多少个, 已次数)
    .如果 (指定文本开头 ＝ “”)
        组合框1.加入项目 (搜索记录 [已次数], )
        是否有内容 ＝ 真
    .否则
        .如果真 (寻找文本 (取文本左边 (搜索记录 [已次数], 取文本长度 (指定文本开头)), 指定文本开头, , 真) ≠ -1)
            组合框1.加入项目 (搜索记录 [已次数], )
            是否有内容 ＝ 真
        .如果真结束

    .如果结束
    调试信息 (搜索记录 [已次数])
.计次循环尾 ()
返回 (是否有内容)

.子程序 _编辑框2_内容被改变

.如果 (编辑框2.内容 ≠ 组合框1.内容 且 编辑框2.内容 ≠ “”)
    .如果 (读取搜索记录 (编辑框2.内容, 1))
        组合框1.发送信息 (335, 1, 0)  ' 弹出组合框
    .否则
        组合框1.发送信息 (335, 0, 0)  ' 收起组合框
    .如果结束

.否则
    组合框1.发送信息 (335, 0, 0)  ' 收起组合框
.如果结束


.子程序 写入搜索记录
.参数 新记录, 文本型
.局部变量 已次数, 整数型
.局部变量 全部文本, 文本型

.计次循环首 (取数组成员数 (搜索记录), 已次数)
    .如果真 (搜索记录 [已次数] ＝ 新记录)
        删除成员 (搜索记录, 已次数, )
        跳出循环 ()  ' 不然删除后循环到最后会超出数组数量崩溃
    .如果真结束

.计次循环尾 ()
全部文本 ＝ 新记录
.计次循环首 (取数组成员数 (搜索记录), 已次数)
    全部文本 ＝ 全部文本 ＋ #换行符 ＋ 搜索记录 [已次数]
.计次循环尾 ()
写到文件 (取运行目录 () ＋ “\搜索记录.ini”, 到字节集 (全部文本))
清除指定缓存 (取运行目录 () ＋ “\搜索记录.ini”)
读取搜索记录 ()

.子程序 _编辑框2_放开某键, 逻辑型
.参数 键代码, 整数型
.参数 功能键状态, 整数型

.如果真 (键代码 ＝ #回车键)
    列表搜索按钮状态 (真)
.如果真结束


.子程序 清除指定缓存
.参数 目标文件名, 文本型, , 含目录
.局部变量 已次数, 整数型

.计次循环首 (取数组成员数 (缓存_目录), 已次数)
    .如果真 (缓存_目录 [已次数] ＝ 目标文件名)
        删除成员 (缓存_目录, 已次数, )
        删除成员 (缓存_文件, 已次数, )
        返回 ()
    .如果真结束

.计次循环尾 ()

.子程序 _编辑框2_获得焦点

编辑框焦点 ＝ 真
.如果真 (状态_是否已加速搜索 ＝ 假 且 设置缓存级别 ≠ 0)
    状态_是否已加速搜索 ＝ 真
    启动线程 (&预加速搜索, , 加速搜索线程)
.如果真结束


.子程序 预加速搜索

进度条1.可视 ＝ 真
开始缓存 (进度条1, 真, 假, 假, 假, 100)
按钮11.可视 ＝ 真
加速搜索线程 ＝ 0






.子程序 _编辑框2_失去焦点

编辑框焦点 ＝ 假

.子程序 _编辑框1_获得焦点

编辑框焦点 ＝ 真

.子程序 _编辑框1_失去焦点

编辑框焦点 ＝ 假


.子程序 waifu2x, 逻辑型, , 调用waifu2x-caffe-cui.exe对图片进行放大 ByWGzeyu
.参数 输入文件, 文本型, , 输入路径文件名
.参数 输出文件, 文本型, , 输出路径文件名
.参数 处理器, 文本型, , cpu/gpu/cudnn
.参数 降噪等级, 整数型, , 0/1/2/3
.参数 宽度a, 整数型, , 输出宽度
.参数 高度a, 整数型, , 输出高度
.参数 模型, 文本型, , 无需models/开头
.参数 waifu2x路径, 文本型, , waifu2x-caffe-cui.exe所在路径文件名
.参数 是否等待完成, 逻辑型
.局部变量 当前命令, 文本型

.如果真 (输入文件 ＝ “” 或 文件是否存在 (输入文件) ＝ 假)
    返回 (假)
.如果真结束
.如果真 (输出文件 ＝ “”)
    返回 (假)
.如果真结束
.如果真 (处理器 ＝ “”)
    返回 (假)
.如果真结束
.如果真 (降噪等级 ＜ 0 或 降噪等级 ＞ 3)
    返回 (假)
.如果真结束
.如果真 (宽度a ＝ 0)
    返回 (假)
.如果真结束
.如果真 (高度a ＝ 0)
    返回 (假)
.如果真结束
.如果真 (模型 ＝ “”)
    返回 (假)
.如果真结束
.如果真 (文件是否存在 (waifu2x路径) ＝ 假 或 取文本右边 (waifu2x路径, 4) ≠ “.exe”)
    返回 (假)
.如果真结束
调试输出 (“开始放大”)
当前命令 ＝ waifu2x路径
当前命令 ＝ 当前命令 ＋ “ -i ” ＋ #引号 ＋ 输入文件 ＋ #引号
当前命令 ＝ 当前命令 ＋ “ -o ” ＋ #引号 ＋ 输出文件 ＋ #引号
当前命令 ＝ 当前命令 ＋ “ -p ” ＋ 处理器
.如果真 (降噪等级 ≠ 0)
    当前命令 ＝ 当前命令 ＋ “ -n ” ＋ 到文本 (降噪等级)
.如果真结束
当前命令 ＝ 当前命令 ＋ “ -w ” ＋ 到文本 (宽度a)
当前命令 ＝ 当前命令 ＋ “ -h ” ＋ 到文本 (高度a)
.如果 (降噪等级 ＝ 0)
    当前命令 ＝ 当前命令 ＋ “ -m scale”
.否则
    当前命令 ＝ 当前命令 ＋ “ -m noise_scale”
.如果结束
当前命令 ＝ 当前命令 ＋ “ --model_dir models/” ＋ 模型
调试输出 (“waifu2x命令” ＋ 当前命令)
.如果真 (运行 (当前命令, 是否等待完成, 3) ＝ 假)  ' 执行waifu2x放大命令
    返回 (假)
.如果真结束
.如果 (文件是否存在 (输出文件) ＝ 真 或 是否等待完成 ＝ 假)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 _按钮10_被单击
.局部变量 按下按钮, 整数型

.如果 (waifu2x状态 ＝ 假)
    waifu2x缩放 ()
.否则
    按下按钮 ＝ 信息框 (“当前显示的图片已经被处理过了，” ＋ #换行符 ＋ “用处理后图片替换历史记录点：是” ＋ #换行符 ＋ “还原为未处理原图显示状态点：否” ＋ #换行符 ＋ “什么都不做可点取消来关闭此提示”, 3, , )
    .如果真 (按下按钮 ＝ 5)  ' 是
        删除文件 (配置目录 ＋ “ini\” ＋ 当前时间 ＋ “.ini”)
        写到文件 (配置目录 ＋ “ini\” ＋ 当前时间 ＋ “.ini”, 到字节集 (waifu2x处理结果))
        弹送提示 (“已更新当前文件到历史记录中”)
        waifu2x状态 ＝ 假
        时钟1.时钟周期 ＝ 1
    .如果真结束
    .如果真 (按下按钮 ＝ 6)  ' 否
        反向处理 (真)
        waifu2x状态 ＝ 假
        时钟1.时钟周期 ＝ 1
    .如果真结束

.如果结束


.子程序 图片_缩放, 字节集, , 网点的摩尔纹效果比易语言自带缩放要小一些
.参数 图片a, 字节集
.参数 输入宽度, 整数型
.参数 输入高度, 整数型
.局部变量 d, 对象
.局部变量 shuj_, 整数型, , "0"
.局部变量 shuj_2, 整数型, , "0"
.局部变量 k_, 整数型
.局部变量 g_, 整数型
.局部变量 k_2, 整数型
.局部变量 g_2, 整数型
.局部变量 wt_, 位图
.局部变量 _新操作, 新版_位图处理
.局部变量 转换后, 字节集

d.创建图片对象 (图片a)
wt_.载入数据 (d.取回图片 ())
_新操作.位图_转_像素组 (wt_, shuj_)
k_ ＝ wt_.取宽度 ()
g_ ＝ wt_.取高度 ()
k_2 ＝ 输入宽度
g_2 ＝ 输入高度
_新操作.像素组_缩放图片_无损 (shuj_, k_, g_, k_2, g_2, shuj_2)
wt_.创建 (1, 1, 24, #白色)
_新操作.像素组_转_位图 (wt_, shuj_2, k_2, g_2)
返回 (wt_.取位图数据 ())

.子程序 _按钮11_被单击

组合框2.发送信息 (335, 1, 0)  ' 弹出组合框

.子程序 _组合框2_将弹出列表

组合框2.可视 ＝ 真
组合框2.调整层次 (1)

.子程序 _组合框2_列表被关闭

组合框2.可视 ＝ 假

.子程序 _组合框2_列表项被选择

当前几页 ＝ 0
配置目录 ＝ 组合框2.取项目文本 (组合框2.现行选中项)
.如果真 (按钮8.标题 ≠ “历史列表”)
    _按钮8_被单击 ()
    .如果真 (自动打开)
        _按钮8_被单击 ()
    .如果真结束

.如果真结束
弹送提示 (“已切换,未保存”)
组合框1.发送信息 (335, 0, 0)  ' 收起组合框

.子程序 接收滚轮, , , 不想弄全局滚轮钩子，就先这样搞吧 省事
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

调试信息 (“滚轮：” ＋ 到文本 (滚动距离) ＋ “，” ＋ 到文本 (功能键状态))
.如果真 (滚动距离 ≠ 0)
    记录_积累滚动次数 ＝ 记录_积累滚动次数 ＋ 正负互换 (滚动距离)
.如果真结束
.如果真 (状态_是否正在滚轮 ＝ 假)
    启动线程 (&执行滚轮, , )
.如果真结束


.子程序 执行滚轮, , , 快速滚动不同时多线程不漏次数不崩溃不卡顿
.局部变量 本次滚动, 整数型
.局部变量 之前页数, 整数型

状态_是否正在滚轮 ＝ 真
.判断循环首 (记录_积累滚动次数 ≠ 0)
    本次滚动 ＝ 记录_积累滚动次数
    之前页数 ＝ 当前几页
    .如果 (当前几页 ＋ 本次滚动 ＜ 0)
        当前几页 ＝ 0
    .否则
        当前几页 ＝ 当前几页 ＋ 本次滚动
    .如果结束
    .如果真 (当前几页 ≠ 之前页数)
        加载列表 ()
    .如果真结束
    记录_积累滚动次数 ＝ 记录_积累滚动次数 － 本次滚动
    标签1.标题 ＝ “总数量:” ＋ 到文本 (取数组成员数 (列表历史列表)) ＋ “ 总页数:” ＋ 到文本 (页数数量) ＋ “ 当前页:” ＋ 到文本 (当前几页 ＋ 1)
.判断循环尾 ()
状态_是否正在滚轮 ＝ 假

.子程序 正负互换, 整数型
.参数 输入值, 整数型

.如果真 (输入值 ≠ 0)
    .如果 (取文本左边 (到文本 (输入值), 1) ＝ “-”)
        返回 (到整数 (取文本右边 (到文本 (输入值), 取文本长度 (到文本 (输入值)) － 1)))
    .否则
        返回 (到整数 (“-” ＋ 到文本 (输入值)))
    .如果结束

.如果真结束
返回 (0)

.子程序 _列表图片1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表图片2_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表图片3_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表图片4_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表图片5_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表按钮1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表按钮2_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表按钮3_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表按钮4_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表按钮5_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表地址1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表地址2_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表地址3_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表地址4_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表地址5_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表时间1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表时间2_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表时间3_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表时间4_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表时间5_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _删除按钮1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _删除按钮2_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _删除按钮3_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _删除按钮4_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _删除按钮5_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _文件夹按钮1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _文件夹按钮2_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _文件夹按钮3_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _文件夹按钮4_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _文件夹按钮5_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _收藏按钮1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _收藏按钮2_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _收藏按钮3_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _收藏按钮4_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _收藏按钮5_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _标签1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表下页_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表上页_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _编辑框1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表跳转_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _列表搜索_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _分组框1_滚轮被滚动, 逻辑型
.参数 滚动距离, 整数型
.参数 功能键状态, 整数型

接收滚轮 (滚动距离, 功能键状态)

.子程序 _按钮12_被单击
.局部变量 已次数, 整数型
.局部变量 是否需要裁剪, 逻辑型
.局部变量 当前处理名, 文本型
.局部变量 全地址, 文本型, , "0"
.局部变量 当前次数, 整数型
.局部变量 标签的, 透明标签
.局部变量 转换后图片, 字节集

全地址 ＝ 分割文本 (全列表, #换行符, )
.计次循环首 (图片数量, 已次数)
    当前处理名 ＝ 文件_取目录 (全地址 [已次数]) ＋ “Cut_” ＋ 文件_取文件名 (全地址 [已次数], 假) ＋ “.jpg”
    .如果真 (文件是否存在 (当前处理名) ＝ 假)
        是否需要裁剪 ＝ 真
        调试信息 (“裁剪当前处理名” ＋ 当前处理名)
    .如果真结束

.计次循环尾 ()
裁剪状态 ＝ 真
是否保存大图 ＝ 真
.如果 (是否需要裁剪 ＝ 真)
    载入 (裁边窗口, , 真)
    显示图片 (, 真)
    .计次循环首 (图片数量, 已次数)
        当前次数 ＝ 已次数
        .如果真 (反向状态)
            当前次数 ＝ 图片数量 ＋ 1 － 已次数
        .如果真结束
        当前处理名 ＝ 文件_取目录 (全地址 [已次数]) ＋ “Cut_” ＋ 文件_取文件名 (全地址 [已次数], 假) ＋ “.jpg”
        图片_转换 (图片全 [当前次数], 5, 取运行目录 () ＋ “\raw.png”)  ' 直接存BMP不知道为啥用下面那条会乱码
        转换到JPG (取运行目录 () ＋ “\raw.png”, 当前处理名, 假, 设置_裁剪保存, 真, 0)  ' 上面那条转换不能设定质量

        标签的 ＝ 取标记组件 (当前次数 ＋ 300)
        标签的.标题 ＝ 文件_取文件名 (当前处理名, 真)
    .计次循环尾 ()
    删除文件 (取运行目录 () ＋ “\raw.png”)
.否则
    .计次循环首 (图片数量, 已次数)
        当前次数 ＝ 已次数
        .如果真 (反向状态)
            当前次数 ＝ 图片数量 ＋ 1 － 已次数
        .如果真结束
        当前处理名 ＝ 文件_取目录 (全地址 [已次数]) ＋ “Cut_” ＋ 文件_取文件名 (全地址 [已次数], 假) ＋ “.jpg”
        图片全 [当前次数] ＝ 加载文件 (当前处理名, 3)
        标签的 ＝ 取标记组件 (当前次数 ＋ 300)
        标签的.标题 ＝ 文件_取文件名 (当前处理名, 真)
    .计次循环尾 ()
    显示图片 (, 真)
.如果结束

.版本 2
.支持库 EThread

.程序集 窗口程序集_窗口1
.程序集变量 启动的时间, 长整数型

.子程序 _窗口1_创建完毕
.局部变量 内已次数, 整数型
.局部变量 多目录列表, 文本型, , "0"

编辑框1.内容 ＝ 到文本 (显示器宽度)
编辑框2.内容 ＝ 到文本 (显示器高度 ＋ 任务栏高度)
编辑框3.内容 ＝ 到文本 (任务栏高度)
编辑框4.内容 ＝ 到文本 (显示器数量)
编辑框5.内容 ＝ 到文本 (到整数 (图片数量 ÷ 显示器数量))
编辑框6.内容 ＝ 到文本 (图片数量)
图片框1.图片 ＝ #图片2
图片框2.图片 ＝ #图片2
图片框3.图片 ＝ #图片2
图片框4.图片 ＝ #图片2
图片框5.图片 ＝ #图片2
.如果真 (_启动窗口.底色 ＝ 0)
    编辑框7.内容 ＝ “黑色”
.如果真结束
.判断开始 (_启动窗口.底色 ＝ 0)
    编辑框7.内容 ＝ “黑色”
.判断 (_启动窗口.底色 ＝ 16777215)
    编辑框7.内容 ＝ “白色”
.默认
    编辑框7.内容 ＝ 到文本 (_启动窗口.底色)
.判断结束
编辑框9.内容 ＝ 到文本 (显示器左边)
编辑框8.内容 ＝ 配置目录
选择框1.选中 ＝ 自动打开
选择框2.选中 ＝ 是否自动排序
选择框3.选中 ＝ 是否隐藏调试
选择框4.选中 ＝ 是否详细调试
选择框5.选中 ＝ 是否悬停放大
选择框6.选中 ＝ JPG大图
选择框7.选中 ＝ 不创建配置
选择框8.选中 ＝ 是否等待缓存
选择框9.选中 ＝ 是否压缩图片
编辑框10.内容 ＝ 文本_取出中间文本 (设置文件整理, “<1>”, “<2>”)
编辑框12.内容 ＝ 文本_取出中间文本 (设置文件整理, “<2>”, “<3>”)
编辑框15.内容 ＝ 收藏的目录
编辑框17.内容 ＝ 到文本 (设置_黑色阈值)
编辑框18.内容 ＝ 到文本 (设置_比例阈值)
编辑框19.内容 ＝ 到文本 (设置_裁切宽度)
编辑框20.内容 ＝ 到文本 (设置_裁切高度)
编辑框21.内容 ＝ 到文本 (设置_竖线忽略)
编辑框22.内容 ＝ 到文本 (设置_裁剪保存)
多目录列表 ＝ 分割文本 (多目录文本, “|”, )
.计次循环首 (取数组成员数 (多目录列表), 内已次数)
    列表框1.加入项目 (多目录列表 [内已次数], )
.计次循环尾 ()
.如果真 (到逻辑型 (文本_取出中间文本 (设置文件整理, “<3>”, “<4>”)) ＝ 真)
    单选框2.选中 ＝ 真
    单选框1.选中 ＝ 假
.如果真结束
编辑框11.内容 ＝ 到文本 (设置缓存级别)
调试信息 (“开始读取文件夹所占空间”)
启动的时间 ＝ 到长整数 (时间_取现行时间戳 ())
标签16.标题 ＝ “占用空间(含浏览):” ＋ 文件尺寸到文本 (取文件夹大小 (配置目录), 8)
调试信息 (“获取占用空间耗时毫秒” ＋ 到文本 (到长整数 (时间_取现行时间戳 ()) － 启动的时间))
标签本地版本.标题 ＝ “本地版本号：v” ＋ 到文本 (当前版本 ÷ 10) ＋ “(” ＋ 到文本 (当前版本) ＋ “)”
编辑框14.内容 ＝ waifu2x路径
.计次循环首 (组合框1.取项目数 (), 内已次数)
    .如果真 (组合框1.取项目文本 (内已次数 － 1) ＝ waifu2x模型)
        组合框1.现行选中项 ＝ 内已次数 － 1
    .如果真结束

.计次循环尾 ()
.计次循环首 (组合框3.取项目数 (), 内已次数)
    .如果真 (组合框3.取项目文本 (内已次数 － 1) ＝ waifu2x处理器)
        组合框3.现行选中项 ＝ 内已次数 － 1
    .如果真结束

.计次循环尾 ()
.计次循环首 (组合框2.取项目数 (), 内已次数)
    .如果真 (组合框2.取项目文本 (内已次数 － 1) ＝ 到文本 (waifu2x降噪))
        组合框2.现行选中项 ＝ 内已次数 － 1
    .如果真结束

.计次循环尾 ()
.如果真 (waifu2x无损不降噪)
    选择框10.选中 ＝ 真
.如果真结束
获取版本号 ()
启动的时间 ＝ 取启动时间 ()

.子程序 获取版本号

.判断开始 (更新的内容 ＝ “”)
    标签在线版本.标题 ＝ “在线版本号：正在获取”
.判断 (更新的内容 ＝ “读取失败”)
    标签在线版本.标题 ＝ “在线版本号：” ＋ 更新的内容
.默认
    标签在线版本.标题 ＝ “在线版本号：v” ＋ 到文本 (到整数 (文本_取出中间文本 (更新的内容, “<ver>”, “</ver>”)) ÷ 10) ＋ “(” ＋ 文本_取出中间文本 (更新的内容, “<ver>”, “</ver>”) ＋ “)”
.判断结束


.子程序 _编辑框5_内容被改变

编辑框6.内容 ＝ 到文本 (到整数 (编辑框5.内容) × 到整数 (编辑框4.内容))

.子程序 _编辑框4_内容被改变

编辑框6.内容 ＝ 到文本 (到整数 (编辑框5.内容) × 到整数 (编辑框4.内容))

.子程序 _按钮2_被单击

.如果 (到整数 (编辑框6.内容) ≥ 1 且 到整数 (编辑框6.内容) ≤ 30 且 快速取出现次数 (到文本 (到整数 (编辑框6.内容) ÷ 到整数 (编辑框4.内容)), “.”) ＝ 0 且 到整数 (编辑框4.内容) ＝ 显示器数量)
    图片数量 ＝ 到整数 (编辑框6.内容)
    设定图片数量 ()
    弹送提示 (“已应用图片数量设置，未保存！”)
    销毁 ()
.否则
    信息框 (“无法应用，因为设置超出范围或不符合规则或您本次打开此窗口不止修改了这一项设置。”, 0, , )
.如果结束


.子程序 _按钮1_被单击
.局部变量 实际颜色, 整数型
.局部变量 文件整理的, 文本型
.局部变量 waifu2x的路径, 文本型
.局部变量 已次数, 整数型
.局部变量 全部多目录, 文本型

.如果真 (到整数 (编辑框1.内容) ＜ 800)
    信息框 (“显示器宽度请只输入整数数字，最低800(像素)”, 0, , )
    返回 ()
.如果真结束
.如果真 (到整数 (编辑框2.内容) ＜ 720)
    信息框 (“显示器高度请只输入整数数字，最低720(像素)”, 0, , )
    返回 ()
.如果真结束
.如果真 (到整数 (编辑框3.内容) ＝ 0 或 到整数 (编辑框3.内容) ＞ 120)
    信息框 (“任务栏真的有这么高吗？是只输入整数数字吗？”, 0, , )
    返回 ()
.如果真结束
.如果真 (到整数 (编辑框4.内容) ＝ 0 或 到整数 (编辑框4.内容) ＞ 10)
    信息框 (“显示器数量最小1，最大10，只能输入数字！”, 0, , )
    返回 ()
.如果真结束
.如果真 (到整数 (编辑框6.内容) ＝ 0 或 到整数 (编辑框6.内容) ＞ 30)
    信息框 (“总图片数量最小1，最大30，自动根据图片数量和显示器数量计算得出！只可输入纯数字，否则数值会被当做0！”, 0, , )
    返回 ()
.如果真结束
.如果真 (编辑框16.内容 ≠ “” 且 列表框1.取项目数 () ＝ 0)
    信息框 (“提示：多目录切换时需要输入目录后点'加'加到列表中才可以使用！”, 0, , )
.如果真结束
.判断开始 (编辑框7.内容 ＝ “黑色”)
    实际颜色 ＝ 0
.判断 (编辑框7.内容 ＝ “白色”)
    实际颜色 ＝ 16777215
.默认
    实际颜色 ＝ 到整数 (编辑框7.内容)
.判断结束
.如果真 (到整数 (编辑框4.内容) ＝ 1 且 到整数 (编辑框9.内容) ≠ 0)
    信息框 (“显示器数量为1时，显示器左边只能填0！”, 0, , )
    返回 ()
.如果真结束
.如果真 (到整数 (编辑框11.内容) ＞ 3)
    信息框 (“缓存级别最大只能到3！”, 0, , )
    返回 ()
.如果真结束
.如果真 (到整数 (编辑框11.内容) ＞ 3)
    信息框 (“缓存级别最大只能到3！”, 0, , )
    返回 ()
.如果真结束
.如果真 (到整数 (编辑框17.内容) ＝ 0 或 到整数 (编辑框17.内容) ＞ 20)
    信息框 (“黑色阈值为0不能正常裁剪，超过20可能会把正常内容裁掉！”, 0, , )
.如果真结束
.如果真 (到整数 (编辑框18.内容) ＝ 0 或 到整数 (编辑框18.内容) ＞ 20)
    信息框 (“比例阈值为0不能正常裁剪，超过20就到了直线才裁，可能裁掉正常内容！”, 0, , )
.如果真结束
.如果真 (到整数 (编辑框19.内容) ＜ 100 或 到整数 (编辑框19.内容) ＞ 600)
    信息框 (“横向精度小于100精度会太低，大于600会很慢！”, 0, , )
.如果真结束
.如果真 (到整数 (编辑框20.内容) ＜ 10 或 到整数 (编辑框20.内容) ＞ 100)
    信息框 (“纵向采样小于10会裁掉正常内容，大于100会很慢”, 0, , )
.如果真结束
.如果 (单选框2.选中 ＝ 真)
    文件整理的 ＝ “<1>” ＋ 编辑框10.内容 ＋ “<2>” ＋ 编辑框12.内容 ＋ “<3>移动<4>”
.否则
    文件整理的 ＝ “<1>” ＋ 编辑框10.内容 ＋ “<2>” ＋ 编辑框12.内容 ＋ “<3>复制<4>”
.如果结束
waifu2x的路径 ＝ 编辑框14.内容
调试信息 (waifu2x的路径)
.如果真 (取文本右边 (waifu2x的路径, 4) ≠ “.exe”)
    .如果 (文件是否存在 (waifu2x的路径 ＋ “.exe”))
        waifu2x的路径 ＝ waifu2x的路径 ＋ “.exe”
    .否则
        .如果 (取文本右边 (waifu2x的路径, 1) ≠ “\”)
            waifu2x的路径 ＝ waifu2x的路径 ＋ “\waifu2x-caffe-cui.exe”
        .否则
            waifu2x的路径 ＝ waifu2x的路径 ＋ “waifu2x-caffe-cui.exe”
        .如果结束

    .如果结束

.如果真结束
.如果真 (文件是否存在 (waifu2x的路径) ＝ 假)
    waifu2x的路径 ＝ “”
.如果真结束
调试信息 (waifu2x的路径)
.计次循环首 (列表框1.取项目数 (), 已次数)
    全部多目录 ＝ 全部多目录 ＋ 列表框1.取项目文本 (已次数 － 1) ＋ “|”
.计次循环尾 ()
.如果真 (取文本右边 (编辑框15.内容, 1) ≠ “\” 且 编辑框15.内容 ≠ “”)
    编辑框15.内容 ＝ 编辑框15.内容 ＋ “\”
.如果真结束
.如果真 (编辑框15.内容 ≠ “”)
    创建设置目录 (编辑框15.内容)
.如果真结束
.如果 (新保存设置 (到整数 (编辑框1.内容), 到整数 (编辑框2.内容), 到整数 (编辑框3.内容), 到整数 (编辑框4.内容), 到整数 (编辑框6.内容), 实际颜色, 编辑框8.内容, 到整数 (编辑框9.内容), 选择框1.选中, 到整数 (编辑框11.内容), 选择框2.选中, 选择框3.选中, 选择框4.选中, 选择框5.选中, 选择框6.选中, 选择框7.选中, “<1>” ＋ 编辑框10.内容 ＋ “<2>” ＋ 编辑框12.内容 ＋ “<3>” ＋ 到文本 (单选框2.选中) ＋ “<4>”, 选择框8.选中, 选择框9.选中, waifu2x的路径, 组合框1.取项目文本 (组合框1.现行选中项), 组合框3.取项目文本 (组合框3.现行选中项), 到整数 (组合框2.取项目文本 (组合框2.现行选中项)), 选择框10.选中, 编辑框15.内容, 全部多目录, 到整数 (编辑框17.内容), 到整数 (编辑框18.内容), 到整数 (编辑框19.内容), 到整数 (编辑框20.内容), 到整数 (编辑框21.内容), 到整数 (编辑框22.内容)))
    弹送提示 (“已成功保存并应用设置！”)
    设置是否更改 ＝ 真
    销毁 ()
.否则
    弹送提示 (“错误：保存失败”)
.如果结束


.子程序 创建设置目录
.参数 目标文件夹, 文本型

.如果真 (目录_是否存在 (目标文件夹) ＝ 假)
    创建目录 (目标文件夹)
.如果真结束
.如果真 (目录_是否存在 (目标文件夹 ＋ “ini\”) ＝ 假)
    创建目录 (目标文件夹 ＋ “ini\”)
.如果真结束
.如果真 (目录_是否存在 (目标文件夹 ＋ “img_b\”) ＝ 假)
    创建目录 (目标文件夹 ＋ “img_b\”)
.如果真结束
.如果真 (目录_是否存在 (目标文件夹 ＋ “img_s\”) ＝ 假)
    创建目录 (目标文件夹 ＋ “img_s\”)
.如果真结束
.如果真 (目录_是否存在 (目标文件夹 ＋ “backup\”) ＝ 假)
    创建目录 (目标文件夹 ＋ “backup\”)
.如果真结束
.如果真 (目录_是否存在 (目标文件夹 ＋ “set\”) ＝ 假)
    创建目录 (目标文件夹 ＋ “set\”)
.如果真结束


.子程序 新保存设置, 逻辑型
.参数 显示器宽度a, 整数型
.参数 显示器高度a, 整数型
.参数 任务栏高度a, 整数型
.参数 显示器数量a, 整数型
.参数 图片数量a, 整数型
.参数 背景颜色a, 整数型
.参数 配置文件目录a, 文本型
.参数 显示器左边a, 整数型
.参数 自动打开a, 逻辑型
.参数 缓存级别a, 整数型
.参数 自动排序a, 逻辑型
.参数 隐藏调试a, 逻辑型
.参数 详细调试a, 逻辑型
.参数 悬停放大a, 逻辑型
.参数 JPG大图a, 逻辑型
.参数 不创建配置a, 逻辑型
.参数 文件整理a, 文本型
.参数 是否等待缓存a, 逻辑型
.参数 是否压缩图片a, 逻辑型
.参数 waifu2x路径a, 文本型
.参数 waifu2x模型a, 文本型
.参数 waifu2x处理器a, 文本型
.参数 waifu2x降噪a, 整数型
.参数 waifu2x无损不降噪a, 逻辑型
.参数 收藏目录a, 文本型
.参数 多目录a, 文本型
.参数 黑色阈值a, 整数型
.参数 比例阈值a, 整数型
.参数 裁切宽度a, 整数型
.参数 裁切高度a, 整数型
.参数 竖线忽略a, 整数型
.参数 裁剪保存a, 整数型
.局部变量 保存信息, 文本型
.局部变量 信息数组, 文本型, , "0"
.局部变量 模板数组, 文本型, , "0"
.局部变量 内已次数, 整数型
.局部变量 生成信息, 文本型

保存信息 ＝ 保存信息 ＋ 到文本 (显示器宽度a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (显示器高度a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (任务栏高度a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (显示器数量a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (图片数量a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (背景颜色a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (配置文件目录a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (显示器左边a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (自动打开a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (缓存级别a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (自动排序a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (隐藏调试a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (详细调试a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (悬停放大a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (JPG大图a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (不创建配置a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (文件整理a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (是否等待缓存a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (是否压缩图片a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (waifu2x路径a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (waifu2x模型a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (waifu2x处理器a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (waifu2x降噪a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (waifu2x无损不降噪a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (收藏目录a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (多目录a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (黑色阈值a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (比例阈值a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (裁切宽度a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (裁切高度a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (竖线忽略a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (裁剪保存a) ＋ “</*内容*/>” ＋ #换行符
信息数组 ＝ 分割文本 (保存信息, #换行符, )
模板数组 ＝ 分割文本 (#新设置模板, #换行符, )
.如果真 (取数组成员数 (信息数组) ≠ 取数组成员数 (模板数组))
    信息框 (“内部错误：” ＋ #换行符 ＋ “设置模板数量与设置项目不匹配，” ＋ #换行符 ＋ “无法保存设置！”, 16, , )
    返回 (假)
.如果真结束
.计次循环首 (取数组成员数 (信息数组), 内已次数)
    信息数组 [内已次数] ＝ 文本_替换 (信息数组 [内已次数], , , , “</*内容*/>”, “”)  ' 加个内容是怕空行被忽略导致错位
    生成信息 ＝ 生成信息 ＋ “<” ＋ 模板数组 [内已次数] ＋ “>” ＋ 信息数组 [内已次数] ＋ “</” ＋ 模板数组 [内已次数] ＋ “>” ＋ #换行符
.计次循环尾 ()
删除文件 (取运行目录 () ＋ “\新设置.ini”)
返回 (写到文件 (取运行目录 () ＋ “\新设置.ini”, 编码_Ansi到Utf8 (生成信息)))

.子程序 _窗口1_位置被改变

.如果真 (取启动时间 () － 启动的时间 ＞ 1000)
    编辑框9.内容 ＝ 到文本 (窗口1.左边 ＋ 4)
.如果真结束


.子程序 _按钮3_被单击
.局部变量 的宽度, 短整数型
.局部变量 的高度, 短整数型

系统_取屏幕分辨率 (, 的宽度, 的高度)
编辑框1.内容 ＝ 到文本 (的宽度)
编辑框2.内容 ＝ 到文本 (的高度)
弹送提示 (“已读取当前显示器分辨率并填写到设置里”)

.子程序 _按钮4_被单击

.如果真 (编辑框10.内容 ＝ “”)
    编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 请输入寻找目录”)
    返回 ()
.如果真结束
.如果真 (编辑框12.内容 ＝ “”)
    编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 请输入移动/复制到目录”)
    返回 ()
.如果真结束
按钮4.禁止 ＝ 真
启动线程 (&整理文件, , )

.子程序 整理文件
.局部变量 已次数, 整数型
.局部变量 全部地址, 文本型, , "0"
.局部变量 目标目录, 文本型
.局部变量 移动目录, 文本型
.局部变量 列表地址, 文本型, , "0"
.局部变量 已移动目录, 文本型, , "0"
.局部变量 小已次数, 整数型
.局部变量 全部文件, 文本型, , "0"
.局部变量 小小已次数, 整数型
.局部变量 文件夹名, 文本型
.局部变量 临时数量, 整数型
.局部变量 是否删除, 逻辑型
.局部变量 当前文件名, 文本型
.局部变量 处理结果, 逻辑型
.局部变量 是否重复, 逻辑型
.局部变量 全部的记录, 文本型
.局部变量 是否处理了, 逻辑型

目标目录 ＝ 编辑框10.内容
移动目录 ＝ 编辑框12.内容
是否删除 ＝ 单选框2.选中
编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 开始整理”)
.如果真 (取文本右边 (移动目录, 1) ≠ “\”)
    移动目录 ＝ 移动目录 ＋ “\”
.如果真结束
进度条1.最大位置 ＝ 取数组成员数 (列表历史列表)
.计次循环首 (取数组成员数 (列表历史列表), 已次数)
    清除数组 (列表地址)
    列表地址 ＝ 分割文本 (到文本 (加载文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数] ＋ “.ini”, 0)), #换行符, )
    编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 开始查询记录” ＋ 时间_时间戳转文本 (列表历史列表 [已次数] ＋ “000”) ＋ “”)
    是否处理了 ＝ 假
    .计次循环首 (取数组成员数 (列表地址), 小已次数)
        .如果真 (快速取出现次数 (列表地址 [小已次数], 目标目录) ≠ 0)
            是否处理了 ＝ 真
            是否重复 ＝ 假
            .计次循环首 (取数组成员数 (已移动目录), 小小已次数)
                .如果真 (已移动目录 [小小已次数] ＝ 文件_取目录 (列表地址 [小已次数]))
                    是否重复 ＝ 真
                .如果真结束

            .计次循环尾 ()
            清除数组 (全部文件)
            临时数量 ＝ 文件_枚举 (文件_取目录 (列表地址 [小已次数]), “*.*”, 全部文件, 真)  ' 放变量里代码看着好理解点
            编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 找到目录，并在目录” ＋ 文件_取目录 (列表地址 [小已次数]) ＋ “找到” ＋ 到文本 (临时数量) ＋ “个文件”)
            文件夹名 ＝ 文件_取目录 (列表地址 [小已次数])  ' 首先取出目录
            文件夹名 ＝ 文本_替换 (文件夹名, 快速取出现次数 (列表地址 [小已次数], “\”) － 2, , , “\”, “”)  ' 然后把目标文件夹前方的\全替换掉，只留最后两个
            文件夹名 ＝ 取文本左边 (文件夹名, 取文本长度 (文件夹名) － 1)  ' 去掉最后面的1个\
            文件夹名 ＝ 文本_取出中间文本 (文件夹名 ＋ “/”, “\”, “/”)  ' 这时候只有目标文件夹前面刚好有一个\，再在末尾加一个/，然后取出\/中间内容，则为文件夹名称
            .如果真 (是否重复 ＝ 假)
                编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 不重复，开始整理文件”)
                .如果 (文件夹名 ＝ “”)
                    编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 取文件目录失败！”)
                    加入成员 (已移动目录, 文件_取目录 (列表地址 [小已次数]))
                    到循环尾 ()
                .否则
                    .如果 (创建目录 (移动目录 ＋ 文件夹名 ＋ “\”))
                        编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 创建文件夹” ＋ 文件夹名 ＋ “成功”)
                    .否则
                        .如果 (目录_是否存在 (移动目录 ＋ 文件夹名 ＋ “\”))
                            编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 创建文件夹” ＋ 文件夹名 ＋ “成功”)
                        .否则
                            编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 创建文件夹” ＋ 文件夹名 ＋ “失败”)
                            加入成员 (已移动目录, 文件_取目录 (列表地址 [小已次数]))
                            到循环尾 ()
                        .如果结束

                    .如果结束

                .如果结束
                .计次循环首 (取数组成员数 (全部文件), 小小已次数)
                    当前文件名 ＝ 文件_取文件名 (全部文件 [小小已次数], 真)
                    调试信息 (“目标：” ＋ 文件_取目录 (列表地址 [小已次数]) ＋ 当前文件名 ＋ “ 移到：” ＋ 移动目录 ＋ 文件夹名 ＋ “\” ＋ 当前文件名)
                    .如果 (是否删除)
                        编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 开始移动” ＋ 当前文件名)
                        .如果 (文件_是否存在 (移动目录 ＋ 文件夹名 ＋ “\” ＋ 当前文件名))
                            处理结果 ＝ 真
                        .否则
                            处理结果 ＝ 文件_移动 (文件_取目录 (列表地址 [小已次数]) ＋ 当前文件名, 移动目录 ＋ 文件夹名 ＋ “\” ＋ 当前文件名)
                        .如果结束
                        .如果 (处理结果)
                            编辑框13.加入文本 (“ 成功”)
                        .否则
                            编辑框13.加入文本 (“ 失败”)
                        .如果结束

                    .否则
                        编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 开始复制” ＋ 当前文件名)
                        .如果 (文件_是否存在 (移动目录 ＋ 文件夹名 ＋ “\” ＋ 当前文件名))
                            处理结果 ＝ 真  ' 收藏目录可能需要重复使用文件整理来替换，所以可能会遇到文件已复制过去的情况，所以加个这个做判断
                        .否则
                            处理结果 ＝ 文件_复制 (文件_取目录 (列表地址 [小已次数]) ＋ 当前文件名, 移动目录 ＋ 文件夹名 ＋ “\” ＋ 当前文件名)
                        .如果结束
                        .如果 (处理结果)
                            编辑框13.加入文本 (“ 成功”)
                        .否则
                            编辑框13.加入文本 (“ 失败”)
                        .如果结束

                    .如果结束

                .计次循环尾 ()
                加入成员 (已移动目录, 文件_取目录 (列表地址 [小已次数]))
            .如果真结束
            .如果真 (文件夹名 ≠ “”)
                编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 替换历史记录”)
                列表地址 [小已次数] ＝ 移动目录 ＋ 文件夹名 ＋ “\” ＋ 文件_取文件名 (列表地址 [小已次数], 真)
            .如果真结束

        .如果真结束

    .计次循环尾 ()
    .如果真 (是否处理了)
        全部的记录 ＝ “”
        .计次循环首 (取数组成员数 (列表地址), 小已次数)
            全部的记录 ＝ 全部的记录 ＋ 列表地址 [小已次数] ＋ #换行符
        .计次循环尾 ()
        删除文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数] ＋ “.ini”)
        编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 写入历史记录”)
        写到文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数] ＋ “.ini”, 到字节集 (全部的记录))
    .如果真结束
    进度条1.位置 ＝ 已次数
.计次循环尾 ()
按钮4.禁止 ＝ 假
.如果真 (设置缓存级别 ≠ 0)
    清空缓存 ()
    编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 已清空缓存”)
.如果真结束
编辑框13.加入文本 (#换行符 ＋ 时间_到文本 (, 1, 5) ＋ “ 整理完成，已复制日志”)
置剪辑板文本 (编辑框13.内容)

.子程序 文件尺寸到文本, 文本型
.参数 文件尺寸, 长整数型, , 单位为字节“B”
.参数 字节长度, 短整数型, , 输出字节长度，用于判断保留小数
.局部变量 当前单位, 短整数型
.局部变量 当前尺寸, 双精度小数型
.局部变量 单位文本, 文本型, , "0"
.局部变量 当前内容, 文本型
.局部变量 补0内容, 文本型

当前尺寸 ＝ 文件尺寸
单位文本 ＝ 分割文本 (“B,KB,MB,GB,TB,PB,EB,ZB,YB,BB,NB,DB”, “,”, )
.判断循环首 (当前尺寸 ≥ 1024 且 当前单位 ≤ 11)
    当前尺寸 ＝ 当前尺寸 ÷ 1024
    当前单位 ＝ 当前单位 ＋ 1
.判断循环尾 ()
当前内容 ＝ 到文本 (四舍五入 (当前尺寸, 字节长度 － 3 － 取文本长度 (到文本 (到整数 (当前尺寸)))))
.如果真 (取文本长度 (当前内容) ＋ 取文本长度 (单位文本 [当前单位 ＋ 1]) ＜ 字节长度)
    .计次循环首 (字节长度 － (取文本长度 (当前内容) ＋ 2), )
        补0内容 ＝ “0” ＋ 补0内容
    .计次循环尾 ()
.如果真结束
' 返回 (到文本 (四舍五入 (当前尺寸, 字节长度 － 3 － 取文本长度 (到文本 (到整数 (当前尺寸))))) ＋ 单位文本 [当前单位 ＋ 1])
返回 (当前内容 ＋ 补0内容 ＋ 单位文本 [当前单位 ＋ 1])

.子程序 取文件夹大小, 长整数型
.参数 文件夹, 文本型, , 路径
.局部变量 FSO, 对象
.局部变量 IFolder, 对象

FSO.创建 (“Scripting.FileSystemObject”, )
IFolder ＝ FSO.对象型方法 (“GetFolder”, 文件夹)
返回 (IFolder.读数值属性 (“Size”, ))

.子程序 _选择夹1_子夹被改变

.如果 (选择夹1.现行子夹 ＝ 6 或 选择夹1.现行子夹 ＝ 7)
    按钮1.可视 ＝ 假
.否则
    按钮1.可视 ＝ 真
.如果结束
.如果真 (按钮6.禁止 ＝ 假)
    窗口1.高度 ＝ 287
.如果真结束
.如果 (选择夹1.现行子夹 ＝ 2)
    按钮1.左边 ＝ 0
    按钮1.顶边 ＝ 165
    按钮1.宽度 ＝ 86
    按钮1.高度 ＝ 93
.否则
    按钮1.左边 ＝ 236
    按钮1.顶边 ＝ 233
    按钮1.宽度 ＝ 113
    按钮1.高度 ＝ 24
.如果结束


.子程序 _按钮5_被单击

网页_打开指定网址 (“https://github.com/wgzeyu/manhuayueduqi”)

.子程序 _按钮7_被单击

网页_打开指定网址 (文本_取出中间文本 (更新的内容, “<url>”, “</url>”))
获取版本号 ()

.子程序 _选择框4_被单击

.如果真 (选择框4.选中 ＝ 真)
    弹送提示 (“打开详细调试将降低运行速度”)
.如果真结束


.子程序 _选择框6_被单击

.如果真 (选择框6.选中 ＝ 真)
    弹送提示 (“JPG浏览图体积增加200%,大幅提升悬停放大及打开时浏览画质”)
.如果真结束


.子程序 _按钮6_被单击

按钮6.禁止 ＝ 真
窗口1.高度 ＝ 357
计算全部空间 ()
按钮6.禁止 ＝ 假

.子程序 计算全部空间, , , 由整理文件子程序修改
.局部变量 已次数, 整数型
.局部变量 列表地址, 文本型, , "0"
.局部变量 已移动目录, 文本型, , "0"
.局部变量 小已次数, 整数型
.局部变量 小小已次数, 整数型
.局部变量 是否重复, 逻辑型
.局部变量 总大小, 长整数型

进度条2.最大位置 ＝ 取数组成员数 (列表历史列表)
.计次循环首 (取数组成员数 (列表历史列表), 已次数)
    清除数组 (列表地址)
    列表地址 ＝ 分割文本 (到文本 (加载文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数] ＋ “.ini”, 0)), #换行符, )
    .计次循环首 (取数组成员数 (列表地址), 小已次数)
        是否重复 ＝ 假
        .计次循环首 (取数组成员数 (已移动目录), 小小已次数)
            .如果真 (已移动目录 [小小已次数] ＝ 文件_取目录 (列表地址 [小已次数]))
                是否重复 ＝ 真
            .如果真结束

        .计次循环尾 ()
        .如果真 (是否重复 ＝ 假)
            总大小 ＝ 总大小 ＋ 取文件夹大小 (文件_取目录 (列表地址 [小已次数]))
            标签40.标题 ＝ 文件尺寸到文本 (总大小, 8)
        .如果真结束
        加入成员 (已移动目录, 文件_取目录 (列表地址 [小已次数]))
    .计次循环尾 ()
    进度条2.位置 ＝ 已次数
    处理事件 ()
.计次循环尾 ()

.子程序 _选择框9_被单击

.如果真 (选择框9.选中 ＝ 真)
    弹送提示 (“JPG>4M/w>2500px或PNG>5M/w>3000px时压缩到w1280pxJPG80后打开,不替换原图”)
.如果真结束


.子程序 _按钮8_被单击

网页_打开指定网址 (“https://github.com/lltcggie/waifu2x-caffe/releases”)

.子程序 _按钮9_被单击

.如果真 (取文本右边 (编辑框16.内容, 1) ≠ “\”)
    编辑框16.内容 ＝ 编辑框16.内容 ＋ “\”
.如果真结束
创建设置目录 (编辑框16.内容)
.如果真 (目录_是否存在 (编辑框16.内容))
    列表框1.加入项目 (编辑框16.内容, )
.如果真结束
编辑框16.内容 ＝ “”

.子程序 _列表框1_列表项被选择

编辑框16.内容 ＝ 列表框1.取项目文本 (列表框1.现行选中项)

.子程序 _按钮10_被单击
.局部变量 已次数, 整数型

.计次循环首 (列表框1.取项目数 (), 已次数)
    .如果真 (列表框1.取项目文本 (已次数 － 1) ＝ 编辑框16.内容)
        列表框1.删除项目 (已次数 － 1)
    .如果真结束

.计次循环尾 ()
编辑框16.内容 ＝ “”

.子程序 _按钮11_被单击

按钮11.可视 ＝ 假
开始缓存 (进度条3, 真, 真, 假, 真, 进度条3.宽度 － 4)
' 按钮11.可视 ＝ 真

.子程序 开始缓存
.参数 进度条部件, 进度条
.参数 类型ini, 逻辑型
.参数 类型png, 逻辑型
.参数 类型jpg, 逻辑型
.参数 等待事件, 逻辑型
.参数 最大进度步进, 整数型
.局部变量 已次数, 整数型
.局部变量 进度步进, 整数型
.局部变量 已进度, 整数型

进度条部件.位置 ＝ 0
.如果 (取数组成员数 (列表历史列表) ＞ 最大进度步进)
    进度步进 ＝ 四舍五入 (取数组成员数 (列表历史列表) ÷ 最大进度步进, 0)
    进度条部件.最大位置 ＝ 四舍五入 (取数组成员数 (列表历史列表) ÷ 进度步进, 0)
.否则
    进度步进 ＝ 1
    进度条部件.最大位置 ＝ 取数组成员数 (列表历史列表)
.如果结束
.计次循环首 (取数组成员数 (列表历史列表), 已次数)
    .如果真 (类型ini ＝ 真)
        加载文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数] ＋ “.ini”, 1)
    .如果真结束
    .如果真 (类型png ＝ 真)
        加载文件 (配置目录 ＋ “img_b\” ＋ 列表历史列表 [已次数] ＋ “.png”, 2)
    .如果真结束
    .如果真 (类型jpg ＝ 真)
        加载文件 (配置目录 ＋ “img_s\” ＋ 列表历史列表 [已次数] ＋ “.jpg”, 2)
    .如果真结束
    已进度 ＝ 已进度 ＋ 1
    .如果真 (已进度 ＝ 进度步进)
        已进度 ＝ 0
        .如果真 (进度条部件.位置 ＜ 进度条部件.最大位置)
            进度条部件.位置 ＝ 进度条部件.位置 ＋ 1
            .如果真 (等待事件)
                处理事件 ()
            .如果真结束

        .如果真结束

    .如果真结束

.计次循环尾 ()
调试信息 (到文本 (进度条部件.位置) ＋ “，” ＋ 到文本 (进度条部件.最大位置))
进度条部件.位置 ＝ 进度条部件.最大位置

.子程序 _按钮12_被单击
.局部变量 对比记录1, 字节集
.局部变量 对比记录2, 字节集
.局部变量 已次数, 整数型
.局部变量 内已次数, 整数型
.局部变量 是否已有, 逻辑型
.局部变量 总数量, 整数型
.局部变量 进度数量, 整数型
.局部变量 重复数量, 整数型

按钮12.可视 ＝ 假
总数量 ＝ 取数组成员数 (列表历史列表)
进度条4.最大位置 ＝ 总数量 ÷ 4
.计次循环首 (总数量, 已次数)
    是否已有 ＝ 假
    对比记录1 ＝ 加载文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [已次数] ＋ “.ini”, 1)
    .如果真 (取字节集长度 (对比记录1) ≠ 0)
        .计次循环首 (总数量, 内已次数)
            对比记录2 ＝ 加载文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [内已次数] ＋ “.ini”, 1)
            .如果真 (对比记录2 ＝ 对比记录1 且 取字节集长度 (对比记录2) ≠ 0)
                .如果 (是否已有)
                    删除文件 (配置目录 ＋ “ini\” ＋ 列表历史列表 [内已次数] ＋ “.ini”)
                    删除文件 (配置目录 ＋ “set\” ＋ 列表历史列表 [内已次数] ＋ “.ini”)
                    删除文件 (配置目录 ＋ “img_b\” ＋ 列表历史列表 [内已次数] ＋ “.png”)
                    删除文件 (配置目录 ＋ “img_s\” ＋ 列表历史列表 [内已次数] ＋ “.jpg”)
                    重复数量 ＝ 重复数量 ＋ 1
                    编辑框23.加入文本 (#换行符 ＋ 列表历史列表 [内已次数] ＋ “与” ＋ 列表历史列表 [已次数] ＋ “重复”)
                    调试信息 (列表历史列表 [内已次数] ＋ “与” ＋ 列表历史列表 [已次数] ＋ “重复”)
                .否则
                    是否已有 ＝ 真
                .如果结束

            .如果真结束

        .计次循环尾 ()

    .如果真结束
    进度数量 ＝ 进度数量 ＋ 1
    .如果真 (进度数量 ≥ 4)
        进度数量 ＝ 0
        进度条4.位置 ＝ 已次数 ÷ 4
    .如果真结束
    处理事件 ()
.计次循环尾 ()
编辑框23.加入文本 (“去重完成！总共” ＋ 到文本 (总数量) ＋ “个记录，其中” ＋ 到文本 (重复数量) ＋ “个为重复记录，已删除，重复占比” ＋ 到文本 (四舍五入 (重复数量 ÷ 总数量 × 100, 0)) ＋ “%”)
.版本 2
.支持库 eAPI
.支持库 iext
.支持库 spec

.程序集 窗口程序集_提示信息
.程序集变量 当前透明度, 短整数型
.程序集变量 目标透明度, 短整数型
.程序集变量 当前高度, 小数型
.程序集变量 高度次数, 短整数型
.程序集变量 是否要关闭, 逻辑型
.程序集变量 显示器的宽度a, 短整数型
.程序集变量 显示器的高度a, 短整数型

.子程序 _提示信息_创建完毕

目标透明度 ＝ 170
当前透明度 ＝ 0
高度次数 ＝ 0
是否要关闭 ＝ 假
设置窗口透明度 (提示信息.取窗口句柄 (), 0)
提示信息.可视 ＝ 真
当前高度 ＝ 到整数 (显示器高度 × 0.85)
系统_取屏幕分辨率 (, 显示器的宽度a, 显示器的高度a, )
.如果 (背景颜色 ＝ #白色)
    提示信息.底色 ＝ #黑色
    透明标签1.文本颜色 ＝ #白色
.否则
    提示信息.底色 ＝ #白色
    透明标签1.文本颜色 ＝ #黑色
    目标透明度 ＝ 200
.如果结束
.如果真 (显示器高度 ＜ 100)  ' 确保在任何情况下均可使用
    当前高度 ＝ 到整数 ((显示器的高度a － 40) × 0.85)
.如果真结束
提示信息.顶边 ＝ 当前高度
透明标签1.标题 ＝ 提示传递信息
透明标签1.宽度 ＝ 32 ＋ 四舍五入 (取文本长度 (透明标签1.标题) × 10.5, 0)
提示信息.宽度 ＝ 32 ＋ 四舍五入 (取文本长度 (透明标签1.标题) × 10.5, 0)
提示信息.左边 ＝ 四舍五入 ((显示器宽度 － 透明标签1.宽度) ÷ 2, 0)
.如果真 (显示器宽度 ＜ 100)  ' 确保在任何情况下均可使用
    提示信息.左边 ＝ 四舍五入 ((显示器的宽度a － 透明标签1.宽度) ÷ 2, 0)
.如果真结束
.如果 (背景颜色 ＝ #白色)
    关闭计时.时钟周期 ＝ 取文本长度 (透明标签1.标题) × 125
.否则
    关闭计时.时钟周期 ＝ 取文本长度 (透明标签1.标题) × 140
.如果结束
' 窗口_圆角化 (提示信息.取窗口句柄 (), 50, 50)  ' 跟被狗啃了一样丑
透明特效.时钟周期 ＝ 10
移动特效.时钟周期 ＝ 15
提示信息.总在最前 ＝ 真
调试输出 (提示信息.左边, 透明标签1.标题, 高度次数)

.子程序 _透明特效_周期事件

.如果 (是否要关闭)
    当前透明度 ＝ 当前透明度 － 四舍五入 (目标透明度 ÷ 18, 0)
    .如果真 (当前透明度 ＜ 0)
        设置窗口透明度 (提示信息.取窗口句柄 (), 0)
        提示信息.可视 ＝ 假
        销毁 ()
        返回 ()
    .如果真结束

.否则
    当前透明度 ＝ 当前透明度 ＋ 四舍五入 (目标透明度 ÷ 18, 0)
    .如果真 (当前透明度 ＞ 目标透明度)
        当前透明度 ＝ 目标透明度
        透明特效.时钟周期 ＝ 0
    .如果真结束

.如果结束
设置窗口透明度 (提示信息.取窗口句柄 (), 当前透明度)

.子程序 _移动特效_周期事件

高度次数 ＝ 高度次数 ＋ 1
.如果真 (高度次数 ≤ 19)
    .如果 (高度次数 ≤ 4 或 高度次数 ≥ 15)
        当前高度 ＝ 当前高度 － 1
    .否则
        当前高度 ＝ 当前高度 － 2
    .如果结束

.如果真结束
.如果真 (高度次数 ≥ 22)
    当前高度 ＝ 当前高度 ＋ 0.4
.如果真结束
.如果真 (提示信息.顶边 ≠ 当前高度)
    提示信息.顶边 ＝ 四舍五入 (当前高度, 0)
.如果真结束
.如果真 (高度次数 ＞ 26)
    移动特效.时钟周期 ＝ 0
.如果真结束


.子程序 _关闭计时_周期事件

关闭计时.时钟周期 ＝ 0
是否要关闭 ＝ 真
透明特效.时钟周期 ＝ 10
.版本 2

.程序集 窗口程序集_大浏览窗口
.程序集变量 当前地址, 文本型
.程序集变量 鼠标位置, 精易_坐标
.程序集变量 计时sd, 长整数型

.子程序 _大浏览窗口_创建完毕

当前地址 ＝ 传递_地址
图片框1.图片 ＝ 传递_图片
_时钟1_周期事件 ()
图片框1.宽度 ＝ 四舍五入 (显示器宽度 × 显示器数量 ÷ 2, 0)
图片框1.高度 ＝ 四舍五入 (显示器高度 ÷ 2, 0)
大浏览窗口.宽度 ＝ 四舍五入 (显示器宽度 × 显示器数量 ÷ 2, 0)
大浏览窗口.高度 ＝ 四舍五入 (显示器高度 ÷ 2, 0)
时钟1.时钟周期 ＝ 15

.子程序 _时钟1_周期事件
.局部变量 加宽度, 整数型

.如果真 (当前地址 ≠ 传递_地址)
    时钟1.时钟周期 ＝ 0
    .如果 (传递_地址 ＝ “”)
        调试信息 (“隐藏”)
        销毁 ()
    .否则
        _大浏览窗口_创建完毕 ()
    .如果结束

.如果真结束
鼠标位置 ＝ 鼠标_取位置 ()
.如果 (鼠标位置.纵 ＋ 50 ＋ 大浏览窗口.高度 ＞ 显示器高度)
    大浏览窗口.顶边 ＝ 显示器高度 － 大浏览窗口.高度
    加宽度 ＝ 鼠标位置.纵 ＋ 50 － (显示器高度 － 大浏览窗口.高度)
    .如果真 (加宽度 ＞ 100)
        加宽度 ＝ 100
    .如果真结束

.否则
    大浏览窗口.顶边 ＝ 鼠标位置.纵 ＋ 50
.如果结束
大浏览窗口.左边 ＝ 鼠标位置.横 ＋ 100 ＋ 加宽度
.版本 2
.支持库 EThread

.程序集 窗口程序集_裁边窗口
.程序集变量 是否已显示, 逻辑型

.子程序 _裁边窗口_创建完毕

画板1.高度 ＝ 设置_裁切高度
画板1.宽度 ＝ 设置_裁切宽度
进度条1.宽度 ＝ 画板1.宽度
进度条1.顶边 ＝ 画板1.高度
裁边窗口.高度 ＝ 画板1.高度 ＋ 进度条1.高度
裁边窗口.宽度 ＝ 画板1.宽度
启动线程 (&裁剪开始, , )

.子程序 裁剪开始
.局部变量 已次数, 整数型

进度条1.最大位置 ＝ 图片数量
.计次循环首 (图片数量, 已次数)
    图片全 [已次数] ＝ 裁边 (图片全 [已次数])
    进度条1.位置 ＝ 已次数
    处理事件 ()
.计次循环尾 ()
销毁 ()

.子程序 显示图片框

.如果真 (是否已显示 ＝ 假)
    图片框1.高度 ＝ 设置_裁切高度
    图片框1.宽度 ＝ 设置_裁切宽度
    图片框1.顶边 ＝ 画板1.高度 ＋ 进度条1.高度
    裁边窗口.高度 ＝ 画板1.高度 ＋ 进度条1.高度 ＋ 图片框1.高度
    是否已显示 ＝ 真
.如果真结束


.子程序 裁边, 字节集, , 返回位图
.参数 输入图片, 字节集
.局部变量 读入图片, 字节集
.局部变量 图片号, 整数型
.局部变量 宽度次数, 整数型
.局部变量 高度次数, 整数型
.局部变量 变黑次数, 整数型
.局部变量 黑色阈值, 整数型
.局部变量 比例阈值, 整数型
.局部变量 左边像素, 整数型
.局部变量 临时宽度, 整数型
.局部变量 右边像素, 整数型
.局部变量 目标图片, 文本型
.局部变量 图片真实宽度, 整数型
.局部变量 图片真实高度, 整数型
.局部变量 裁剪左边, 整数型
.局部变量 裁剪左边白, 整数型
.局部变量 左边的像素, 整数型
.局部变量 左边的像素白, 整数型
.局部变量 裁剪右边, 整数型
.局部变量 裁剪右边白, 整数型
.局部变量 右边的像素, 整数型
.局部变量 右边的像素白, 整数型
.局部变量 开始位置, 整数型
.局部变量 忽略像素, 整数型
.局部变量 有白边, 逻辑型
.局部变量 当前点亮度, 整数型
.局部变量 图片框截图, 字节集
.局部变量 变白次数, 整数型
.局部变量 有黑边, 逻辑型
.局部变量 白左边像素, 整数型

读入图片 ＝ 输入图片
调试信息 (“大小：” ＋ 到文本 (取字节集长度 (读入图片)))
图片_转换 (读入图片, 1, , 读入图片)
图片真实宽度 ＝ 图片_取宽度 (读入图片)
图片真实高度 ＝ 图片_取高度 (读入图片)
.如果 (图片真实宽度 ＞ 2500)
    显示图片框 ()
    图片框1.图片 ＝ 读入图片
    延时 (300)
    .如果真 (图片真实宽度 ＞ 3000)
        延时 (200)
    .如果真结束
    .如果真 (图片真实宽度 ＞ 3500)
        延时 (200)
    .如果真结束
    .如果真 (图片真实宽度 ＞ 4000)
        延时 (300)
    .如果真结束
    图片框截图 ＝ 快照 (图片框1.取窗口句柄 (), , )
    调试信息 (“图片框截图大小：” ＋ 到文本 (取字节集长度 (图片框截图)))
    图片号 ＝ 载入图片 (图片框截图)
.否则
    图片号 ＝ 载入图片 (读入图片)
.如果结束
画板1.画图片 (图片号, 0, 0, 画板1.宽度, 画板1.高度, 1)
调试信息 (“画板图片完成”)
比例阈值 ＝ 设置_比例阈值
黑色阈值 ＝ 设置_黑色阈值
开始位置 ＝ 0
忽略像素 ＝ 四舍五入 (设置_竖线忽略 ÷ 1000 × 画板1.宽度, 0)
有白边 ＝ 假
.如果真 (忽略像素 ＝ 0)
    忽略像素 ＝ 2
.如果真结束
.计次循环首 (画板1.宽度, 宽度次数)
    变黑次数 ＝ 0
    .计次循环首 (画板1.高度, 高度次数)
        .如果真 (颜色值转亮度 (画板1.取点 (宽度次数, 高度次数)) ≥ 黑色阈值)
            变黑次数 ＝ 变黑次数 ＋ 1
        .如果真结束

    .计次循环尾 ()
    .如果 (变黑次数 ÷ 画板1.高度 × 100 ＞ 比例阈值)
        左边像素 ＝ 宽度次数
        .如果真 (开始位置 ＝ 0)
            开始位置 ＝ 宽度次数
        .如果真结束
        .如果真 (宽度次数 ＞ 忽略像素)
            .如果真 (有白边 ＝ 假)
                左边像素 ＝ 开始位置
            .如果真结束
            .如果真 (左边像素 ＝ 1)
                左边像素 ＝ 0
            .如果真结束
            跳出循环 ()
        .如果真结束

    .否则
        .如果真 (宽度次数 ＞ 忽略像素)
            有白边 ＝ 真
        .如果真结束

    .如果结束

.计次循环尾 ()
开始位置 ＝ 0
有白边 ＝ 假
.计次循环首 (画板1.宽度, 临时宽度)
    宽度次数 ＝ 画板1.宽度 ＋ 1 － 临时宽度
    变黑次数 ＝ 0
    .计次循环首 (画板1.高度, 高度次数)
        .如果真 (颜色值转亮度 (画板1.取点 (宽度次数, 高度次数)) ≥ 黑色阈值)
            变黑次数 ＝ 变黑次数 ＋ 1
        .如果真结束

    .计次循环尾 ()
    .如果 (变黑次数 ÷ 画板1.高度 × 100 ＞ 比例阈值)
        右边像素 ＝ 宽度次数
        .如果真 (开始位置 ＝ 0)
            开始位置 ＝ 宽度次数
        .如果真结束
        .如果真 (临时宽度 ＞ 忽略像素)
            .如果真 (有白边 ＝ 假)
                右边像素 ＝ 开始位置
            .如果真结束
            跳出循环 ()
        .如果真结束

    .否则
        .如果真 (临时宽度 ＞ 忽略像素)
            有白边 ＝ 真
        .如果真结束

    .如果结束

.计次循环尾 ()
.如果真 (左边像素 ＞ 1)
    裁剪左边 ＝ 四舍五入 (左边像素 ÷ 画板1.宽度 × 图片真实宽度, 0)
.如果真结束
.如果 (右边像素 ＜ 画板1.宽度)
    裁剪右边 ＝ 四舍五入 (右边像素 ÷ 画板1.宽度 × 图片真实宽度, 0)
.否则
    裁剪右边 ＝ 图片真实宽度
.如果结束
左边的像素 ＝ 左边像素
右边的像素 ＝ 右边像素
' ↑裁白边 ↓裁黑边 ↑裁白边 ↓裁黑边 ↑裁白边 ↓裁黑边 ↑裁白边 ↓裁黑边 ↑裁白边 ↓裁黑边 ↑裁白边 ↓裁黑边 ↑裁白边 ↓裁黑边
开始位置 ＝ 0
忽略像素 ＝ 四舍五入 (设置_竖线忽略 ÷ 1000 × 画板1.宽度, 0)
有白边 ＝ 假
.如果真 (忽略像素 ＝ 0)
    忽略像素 ＝ 2
.如果真结束
.计次循环首 (画板1.宽度, 宽度次数)
    变黑次数 ＝ 0

    .计次循环首 (画板1.高度, 高度次数)
        .如果真 (颜色值转亮度 (画板1.取点 (宽度次数, 高度次数), 真) ≥ 黑色阈值)
            变黑次数 ＝ 变黑次数 ＋ 1
        .如果真结束

    .计次循环尾 ()
    .如果 (变黑次数 ÷ 画板1.高度 × 100 ＞ 比例阈值)
        左边像素 ＝ 宽度次数
        .如果真 (开始位置 ＝ 0)
            开始位置 ＝ 宽度次数
        .如果真结束
        .如果真 (宽度次数 ＞ 忽略像素)
            .如果真 (有白边 ＝ 假)
                左边像素 ＝ 开始位置
            .如果真结束
            .如果真 (左边像素 ＝ 1)
                左边像素 ＝ 0
            .如果真结束
            跳出循环 ()
        .如果真结束

    .否则
        .如果真 (宽度次数 ＞ 忽略像素)
            有白边 ＝ 真
        .如果真结束

    .如果结束

.计次循环尾 ()
开始位置 ＝ 0
有白边 ＝ 假
.计次循环首 (画板1.宽度, 临时宽度)
    宽度次数 ＝ 画板1.宽度 ＋ 1 － 临时宽度
    变黑次数 ＝ 0
    .计次循环首 (画板1.高度, 高度次数)
        .如果真 (颜色值转亮度 (画板1.取点 (宽度次数, 高度次数), 真) ≥ 黑色阈值)
            变黑次数 ＝ 变黑次数 ＋ 1
        .如果真结束

    .计次循环尾 ()
    .如果 (变黑次数 ÷ 画板1.高度 × 100 ＞ 比例阈值)
        右边像素 ＝ 宽度次数
        .如果真 (开始位置 ＝ 0)
            开始位置 ＝ 宽度次数
        .如果真结束
        .如果真 (临时宽度 ＞ 忽略像素)
            .如果真 (有白边 ＝ 假)
                右边像素 ＝ 开始位置
            .如果真结束
            跳出循环 ()
        .如果真结束

    .否则
        .如果真 (临时宽度 ＞ 忽略像素)
            有白边 ＝ 真
        .如果真结束

    .如果结束

.计次循环尾 ()
.如果真 (左边像素 ＞ 1)
    裁剪左边白 ＝ 四舍五入 (左边像素 ÷ 画板1.宽度 × 图片真实宽度, 0)
.如果真结束
.如果 (右边像素 ＜ 画板1.宽度)
    裁剪右边白 ＝ 四舍五入 (右边像素 ÷ 画板1.宽度 × 图片真实宽度, 0)
.否则
    裁剪右边白 ＝ 图片真实宽度
.如果结束
左边的像素白 ＝ 左边像素
右边的像素白 ＝ 右边像素

调试信息 (“裁剪左边” ＋ 到文本 (裁剪左边) ＋ “裁剪右边” ＋ 到文本 (裁剪右边) ＋ “裁剪左边白” ＋ 到文本 (裁剪左边白) ＋ “裁剪右边白” ＋ 到文本 (裁剪右边白))
.如果真 (裁剪左边白 ＞ 裁剪左边)
    裁剪左边 ＝ 裁剪左边白
.如果真结束
.如果真 (裁剪右边白 ＜ 裁剪右边)
    裁剪右边 ＝ 裁剪右边白
.如果真结束

.如果真 (左边的像素 ≤ 1 且 左边的像素白 ≤ 1 且 画板1.宽度 － 右边的像素 ≤ 1 且 画板1.宽度 － 右边的像素白 ≤ 1)
    调试信息 (“此图不裁剪”)
    返回 (读入图片)
.如果真结束

调试信息 (“裁剪：” ＋ 到文本 (裁剪左边) ＋ “ ” ＋ 到文本 (裁剪右边))
返回 (图片_取图片区域 (读入图片, 裁剪左边, 0, 裁剪右边 － 裁剪左边, 图片真实高度))

.子程序 颜色值转亮度, 整数型, , 好吧我承认其实是黑度懒得改了
.参数 颜色值, 整数型
.参数 反色, 逻辑型, 可空
.局部变量 色值_字节集, 字节集
.局部变量 红色, 整数型
.局部变量 绿色, 整数型
.局部变量 蓝色, 整数型
.局部变量 平均, 整数型

色值_字节集 ＝ 到字节集 (颜色值)
红色 ＝ 色值_字节集 [1]
绿色 ＝ 色值_字节集 [2]
蓝色 ＝ 色值_字节集 [3]
平均 ＝ 四舍五入 ((红色 ＋ 绿色 ＋ 蓝色) ÷ 3, 0)
平均 ＝ 四舍五入 (平均 ÷ 255 × 100, 0)
.如果真 (反色)
    返回 (平均)
.如果真结束
返回 (100 － 平均)
.版本 2

.全局变量 当前时间, 文本型
.全局变量 全列表, 文本型
.全局变量 列表线程, 整数型
.全局变量 当前几页, 整数型, , , 0开始
.全局变量 列表历史列表, 文本型, , "0"
.全局变量 页数数量, 整数型
.全局变量 大图线程, 整数型
.全局变量 是否停止加载, 逻辑型
.全局变量 图片数量, 整数型
.全局变量 显示器数量, 整数型
.全局变量 配置目录, 文本型
.全局变量 显示器左边, 整数型
.全局变量 背景颜色, 整数型
.全局变量 等高状态, 逻辑型
.全局变量 反向状态, 逻辑型
.全局变量 计时, 长整数型
.全局变量 是否等待, 逻辑型
.全局变量 当前版本, 整数型
.全局变量 显示器宽度, 整数型
.全局变量 图片全, 字节集, , "99"
.全局变量 显示器高度, 整数型
.全局变量 更新线程, 整数型
.全局变量 任务栏高度, 整数型
.全局变量 设置是否更改, 逻辑型
.全局变量 自动打开, 逻辑型
.全局变量 提示传递信息, 文本型
.全局变量 上次接收, 文本型
.全局变量 缓存_文件, 字节集, , "0"
.全局变量 缓存_目录, 文本型, , "0"
.全局变量 设置缓存级别, 整数型
.全局变量 调试记录, 文本型
.全局变量 是否自动排序, 逻辑型
.全局变量 调试显示, 文本型, , "74"
.全局变量 全调试信息, 文本型
.全局变量 上次调试信息, 文本型
.全局变量 缓存状态, 逻辑型, , , 防止多线程缓存冲突
.全局变量 是否隐藏调试, 逻辑型, , , 彻底不记录调试信息
.全局变量 是否保存大图, 逻辑型, , , 保存到img_s的大浏览图,正向无等高缩放
.全局变量 历史列表打开, 逻辑型, , , 历史列表首次打开
.全局变量 计时3, 长整数型
.全局变量 更新的内容, 文本型
.全局变量 是否详细调试, 逻辑型
.全局变量 上次鼠标位置, 整数型
.全局变量 鼠标持续次数, 整数型
.全局变量 传递_图片, 字节集
.全局变量 传递_地址, 文本型
.全局变量 是否悬停放大, 逻辑型
.全局变量 JPG大图, 逻辑型
.全局变量 不创建配置, 逻辑型, , , 不在图片同文件夹创建记录文件
.全局变量 设置文件整理, 文本型
.全局变量 预读列表线程, 整数型
.全局变量 是否等待缓存, 逻辑型
.全局变量 搜索记录, 文本型, , "0"
.全局变量 编辑框焦点, 逻辑型
.全局变量 是否压缩图片, 逻辑型
.全局变量 waifu2x路径, 文本型
.全局变量 waifu2x模型, 文本型
.全局变量 waifu2x处理器, 文本型
.全局变量 waifu2x降噪, 整数型
.全局变量 waifu2x无损不降噪, 逻辑型
.全局变量 waifu2x状态, 逻辑型
.全局变量 waifu2x处理结果, 文本型
.全局变量 收藏的目录, 文本型
.全局变量 多目录文本, 文本型
.全局变量 记录_积累滚动次数, 整数型
.全局变量 状态_是否正在滚轮, 逻辑型
.全局变量 上次鼠标图片, 整数型
.全局变量 调试_软件启动时间, 长整数型
.全局变量 状态_是否已加速搜索, 逻辑型
.全局变量 加速搜索线程, 整数型
.全局变量 设置_黑色阈值, 整数型
.全局变量 设置_比例阈值, 整数型
.全局变量 设置_裁切宽度, 整数型
.全局变量 设置_裁切高度, 整数型
.全局变量 设置_竖线忽略, 整数型
.全局变量 设置_裁剪保存, 整数型
.全局变量 裁剪状态, 逻辑型
